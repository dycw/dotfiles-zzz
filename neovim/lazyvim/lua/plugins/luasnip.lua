return {
	"L3MON4D3/LuaSnip",
	config = function()
		local ls = require("luasnip")
		local s = ls.snippet
		local t = ls.text_node
		ls.add_snippets("python", {
			-- generic
			s("bp", { t("breakpoint()") }),

			-- standard library: abc
			s("fab-abc", { t("from abc import ABC") }),
			s("fab-abc-meta", { t("from abc import ABCMeta") }),
			s("fab-abstractclassmethod", { t("from abc import abstractclassmethod") }),
			s("fab-abstractmethod", { t("from abc import abstractmethod") }),
			s("fab-abstractproperty", { t("from abc import abstractproperty") }),
			s("fab-abstractstaticmethod", { t("from abc import abstractstaticmethod") }),
			s("fab-get-cache-token", { t("from abc import get_cache_token") }),
			s("fab-update-abstractmethods", { t("from abc import update_abstractmethods") }),

			-- standard library: argparse
			s("far-argument-parser", { t("from argparse import ArgumentParser") }),

			-- standard library: collections
			s("fco-async-generator", { t("from collections.abc import AsyncGenerator") }),
			s("fco-async-iterable", { t("from collections.abc import AsyncIterable") }),
			s("fco-async-iterator", { t("from collections.abc import AsyncIterator") }),
			s("fco-awaitable", { t("from collections.abc import Awaitable") }),
			s("fco-buffer", { t("from collections.abc import Buffer") }),
			s("fco-callable", { t("from collections.abc import Callable") }),
			s("fco-chain-map", { t("from collections import ChainMap") }),
			s("fco-collection", { t("from collections.abc import Collection") }),
			s("fco-container", { t("from collections.abc import Container") }),
			s("fco-coroutine", { t("from collections.abc import Coroutine") }),
			s("fco-counter", { t("from collections import Counter") }),
			s("fco-defaultdict", { t("from collections import defaultdict") }),
			s("fco-deque", { t("from collections import deque") }),
			s("fco-generator", { t("from collections.abc import Generator") }),
			s("fco-hashable", { t("from collections.abc import Hashable") }),
			s("fco-items-view", { t("from collections.abc import ItemsView") }),
			s("fco-iterable", { t("from collections.abc import Iterable") }),
			s("fco-iterator", { t("from collections.abc import Iterator") }),
			s("fco-keys-view", { t("from collections.abc import KeysView") }),
			s("fco-mapping", { t("from collections.abc import Mapping") }),
			s("fco-mapping-view", { t("from collections.abc import MappingView") }),
			s("fco-mutable-mapping", { t("from collections.abc import MutableMapping") }),
			s("fco-mutable-sequence", { t("from collections.abc import MutableSequence") }),
			s("fco-mutable-set", { t("from collections.abc import MutableSet") }),
			s("fco-namedtuple", { t("from collections import namedtuple") }),
			s("fco-ordered-dict", { t("from collections import OrderedDict") }),
			s("fco-reversible", { t("from collections.abc import Reversible") }),
			s("fco-sequence", { t("from collections.abc import Sequence") }),
			s("fco-set", { t("from collections.abc import Set as AbstractSet") }),
			s("fco-sized", { t("from collections.abc import Sized") }),
			s("fco-user-dict", { t("from collections import UserDict") }),
			s("fco-user-list", { t("from collections import UserList") }),
			s("fco-user-string", { t("from collections import UserString") }),
			s("fco-values-view", { t("from collections.abc import ValuesView") }),

			-- standard library: contextlib
			s("fco-abstract-async-context-manager", { t("from contextlib import AbstractAsyncContextManager") }),
			s("fco-abstract-context-manager", { t("from contextlib import AbstractContextManager") }),
			s("fco-aclosing", { t("from contextlib import aclosing") }),
			s("fco-async-context-decorator", { t("from contextlib import AsyncContextDecorator") }),
			s("fco-async-exit-stack", { t("from contextlib import AsyncExitStack") }),
			s("fco-asynccontextmanager", { t("from contextlib import asynccontextmanager") }),
			s("fco-chdir", { t("from contextlib import chdir") }),
			s("fco-closing", { t("from contextlib import closing") }),
			s("fco-context-decorator", { t("from contextlib import ContextDecorator") }),
			s("fco-contextmanager", { t("from contextlib import contextmanager") }),
			s("fco-exit-async", { t("from contextlib import ExitStack") }),
			s("fco-nullcontext", { t("from contextlib import nullcontext") }),
			s("fco-redirect-stderr", { t("from contextlib import redirect_stderr") }),
			s("fco-redirect-stdout", { t("from contextlib import redirect_stdout") }),
			s("fco-suppress", { t("from contextlib import suppress") }),

			-- standard library: csv
			s("fcs-dialect", { t("from csv import Dialect") }),
			s("fcs-dict-reader", { t("from csv import DictReader") }),
			s("fcs-dict-writer", { t("from csv import DictWriter") }),
			s("fcs-excel", { t("from csv import excel") }),
			s("fcs-excel-tab", { t("from csv import excel_tab") }),
			s("fcs-field-size-limit", { t("from csv import field_size_limit") }),
			s("fcs-list-dialects", { t("from csv import list_dialects") }),
			s("fcs-quote-all", { t("from csv import QUOTE_ALL") }),
			s("fcs-quote-minimal", { t("from csv import QUOTE_MINIMAL") }),
			s("fcs-quote-none", { t("from csv import QUOTE_NONE") }),
			s("fcs-quote-nonnumeric", { t("from csv import QUOTE_NONNUMERIC") }),
			s("fcs-reader", { t("from csv import reader") }),
			s("fcs-register-dialect", { t("from csv import register_dialect") }),
			s("fcs-sniffer", { t("from csv import Sniffer") }),
			s("fcs-unix-dialect", { t("from csv import unix_dialect") }),
			s("fcs-unregister-dialect", { t("from csv import unregister_dialect") }),
			s("fcs-writer", { t("from csv import writer") }),

			-- standard library: dataclasses
			s("fda-asdict", { t("from dataclasses import asdict") }),
			s("fda-astuple", { t("from dataclasses import astuple") }),
			s("fda-dataclass", { t("from dataclasses import dataclass") }),
			s("fda-field", { t("from dataclasses import field") }),
			s("fda-fields", { t("from dataclasses import fields") }),
			s("fda-frozen-instance-error", { t("from dataclasses import FrozenInstanceError") }),
			s("fda-is-dataclass", { t("from dataclasses import is_dataclass") }),
			s("fda-kw-only", { t("from dataclasses import KW_ONLY") }),
			s("fda-make-dataclass", { t("from dataclasses import make_dataclass") }),
			s("fda-missing", { t("from dataclasses import MISSING") }),
			s("fda-replace", { t("from dataclasses import replace") }),

			-- standard library: datetime
			s("imdt", { t("import datetime as dt") }),

			-- standard library: enum
			s("fen-auto", { t("from enum import auto") }),
			s("fen-enum", { t("from enum import Enum") }),
			s("fen-enum-check", { t("from enum import EnumCheck") }),
			s("fen-enum-meta", { t("from enum import EnumMeta") }),
			s("fen-flag", { t("from enum import Flag") }),
			s("fen-flag-boundary", { t("from enum import FlagBoundary") }),
			s("fen-global-enum", { t("from enum import global_enum") }),
			s("fen-int-enum", { t("from enum import IntEnum") }),
			s("fen-int-flag", { t("from enum import IntFlag") }),
			s("fen-member", { t("from enum import member") }),
			s("fen-nonmember", { t("from enum import nonmember") }),
			s("fen-property", { t("from enum import property") }),
			s("fen-repr-enum", { t("from enum import ReprEnum") }),
			s("fen-show-flag-values", { t("from enum import show_flag_values") }),
			s("fen-str-enum", { t("from enum import StrEnum") }),
			s("fen-unique", { t("from enum import unique") }),
			s("fen-verify", { t("from enum import verify") }),

			-- standard library: functools
			s("ffu-cache", { t("from functools import cache") }),
			s("ffu-cached-property", { t("from functools import cached_property") }),
			s("ffu-cmp-to-key", { t("from functools import cmp_to_key") }),
			s("ffu-lru-cache", { t("from functools import lru_cache") }),
			s("ffu-partial", { t("from functools import partial") }),
			s("ffu-partialmethod", { t("from functools import partialmethod") }),
			s("ffu-reduce", { t("from functools import reduce") }),
			s("ffu-singledispatch", { t("from functools import singledispatch") }),
			s("ffu-singledispatchmethod", { t("from functools import singledispatchmethod") }),
			s("ffu-total-ordering", { t("from functools import total_ordering") }),
			s("ffu-update-wrapper", { t("from functools import update_wrapper") }),
			s("ffu-wraps", { t("from functools import wraps") }),

			-- standard library: future
			s("ffu-annotations", { t("from __future__ import annotations") }),

			-- standard library: gzip
			s("fgz-bad-gzip-file", { t("from gzip import BadGzipFile") }),
			s("fgz-compress", { t("from gzip import compress") }),
			s("fgz-decompress", { t("from gzip import decompress") }),
			s("fgz-gzip-file", { t("from gzip import GzipFile") }),

			-- standard library: hashlib
			s("fha-algorithms-available", { t("from hashlib import algorithms_available") }),
			s("fha-algorithms-guaranteed", { t("from hashlib import algorithms_guaranteed") }),
			s("fha-blake2b", { t("from hashlib import blake2b") }),
			s("fha-blake2s", { t("from hashlib import blake2s") }),
			s("fha-file-digest", { t("from hashlib import file_digest") }),
			s("fha-md5", { t("from hashlib import md5") }),
			s("fha-new", { t("from hashlib import new") }),
			s("fha-pbkdf2-hmac", { t("from hashlib import pbkdf2_hmac") }),
			s("fha-scrypt", { t("from hashlib import scrypt") }),
			s("fha-sha1", { t("from hashlib import sha1") }),
			s("fha-sha224", { t("from hashlib import sha224") }),
			s("fha-sha256", { t("from hashlib import sha256") }),
			s("fha-sha3-224", { t("from hashlib import sha3_224") }),
			s("fha-sha3-256", { t("from hashlib import sha3_256") }),
			s("fha-sha3-384", { t("from hashlib import sha3_384") }),
			s("fha-sha3-512", { t("from hashlib import sha3_512") }),
			s("fha-sha384", { t("from hashlib import sha384") }),
			s("fha-sha512", { t("from hashlib import sha512") }),
			s("fha-shake-128", { t("from hashlib import shake_128") }),
			s("fha-shake-256", { t("from hashlib import shake_256") }),

			-- standard library: importlib
			s("fim-all-suffixes", { t("from importlib.machinery import all_suffixes") }),
			s("fim-builtin-importer", { t("from importlib.machinery import BuiltinImporter") }),
			s("fim-bytecode-suffixes", { t("from importlib.machinery import BYTECODE_SUFFIXES") }),
			s("fim-cache-from-source", { t("from importlib.util import cache_from_source") }),
			s("fim-debug-bytecode-suffixes", { t("from importlib.machinery import DEBUG_BYTECODE_SUFFIXES") }),
			s("fim-decode-source", { t("from importlib.util import decode_source") }),
			s("fim-execution-loader", { t("from importlib.abc import ExecutionLoader") }),
			s("fim-extension-file-loader", { t("from importlib.machinery import ExtensionFileLoader") }),
			s("fim-extension-suffixes", { t("from importlib.machinery import EXTENSION_SUFFIXES") }),
			s("fim-file-finder", { t("from importlib.machinery import FileFinder") }),
			s("fim-file-loader", { t("from importlib.abc import FileLoader") }),
			s("fim-find-loader", { t("from importlib import find_loader") }),
			s("fim-find-spec", { t("from importlib.util import find_spec") }),
			s("fim-frozen-importer", { t("from importlib.machinery import FrozenImporter") }),
			s("fim-import-module", { t("from importlib import import_module") }),
			s("fim-inspect-loader", { t("from importlib.abc import InspectLoader") }),
			s("fim-invalidate-caches", { t("from importlib import invalidate_caches") }),
			s("fim-lazy-loader", { t("from importlib.util import LazyLoader") }),
			s("fim-loader", { t("from importlib.abc import Loader") }),
			s("fim-magic-number", { t("from importlib.util import MAGIC_NUMBER") }),
			s("fim-meta-path-finder", { t("from importlib.abc import MetaPathFinder") }),
			s("fim-module-for-loader", { t("from importlib.util import module_for_loader") }),
			s("fim-module-from-spec", { t("from importlib.util import module_from_spec") }),
			s("fim-module-spec", { t("from importlib.machinery import ModuleSpec") }),
			s("fim-namespace-loader", { t("from importlib.machinery import NamespaceLoader") }),
			s("fim-optimized-bytecode-suffixes", { t("from importlib.machinery import OPTIMIZED_BYTECODE_SUFFIXES") }),
			s("fim-path-entry-finder", { t("from importlib.abc import PathEntryFinder") }),
			s("fim-path-finder", { t("from importlib.machinery import PathFinder") }),
			s("fim-reload", { t("from importlib import reload") }),
			s("fim-resolve-name", { t("from importlib.util import resolve_name") }),
			s("fim-resource-loader", { t("from importlib.abc import ResourceLoader") }),
			s("fim-set-loader", { t("from importlib.util import set_loader") }),
			s("fim-set-package", { t("from importlib.util import set_package") }),
			s("fim-source-file-loader", { t("from importlib.machinery import SourceFileLoader") }),
			s("fim-source-from-cache", { t("from importlib.util import source_from_cache") }),
			s("fim-source-hash", { t("from importlib.util import source_hash") }),
			s("fim-source-loader", { t("from importlib.abc import SourceLoader") }),
			s("fim-source-suffixes", { t("from importlib.machinery import SOURCE_SUFFIXES") }),
			s("fim-sourceless-file-loader", { t("from importlib.machinery import SourcelessFileLoader") }),
			s("fim-spec-from-file-location", { t("from importlib.util import spec_from_file_location") }),
			s("fim-spec-from-loader", { t("from importlib.util import spec_from_loader") }),

			-- standard library: itertools
			s("fit-accumulate", { t("from itertools import accumulate") }),
			s("fit-chain", { t("from itertools import chain") }),
			s("fit-combinations", { t("from itertools import combinations") }),
			s("fit-combinations-with-replacement", { t("from itertools import combinations_with_replacement") }),
			s("fit-compress", { t("from itertools import compress") }),
			s("fit-count", { t("from itertools import count") }),
			s("fit-cycle", { t("from itertools import cycle") }),
			s("fit-dropwhile", { t("from itertools import dropwhile") }),
			s("fit-filterfalse", { t("from itertools import filterfalse") }),
			s("fit-groupby", { t("from itertools import groupby") }),
			s("fit-islice", { t("from itertools import islice") }),
			s("fit-pairwise", { t("from itertools import pairwise") }),
			s("fit-permutations", { t("from itertools import permutations") }),
			s("fit-product", { t("from itertools import product") }),
			s("fit-repeat", { t("from itertools import repeat") }),
			s("fit-starmap", { t("from itertools import starmap") }),
			s("fit-takewhile", { t("from itertools import takewhile") }),
			s("fit-tee", { t("from itertools import tee") }),
			s("fit-zip-longest", { t("from itertools import zip_longest") }),

			-- standard library: pathlib
			s("fpapath", { t("from pathlib import Path") }),

			-- standard library: random
			s("fra-betavariate", { t("from random import betavariate") }),
			s("fra-binomialvariate", { t("from random import binomialvariate") }),
			s("fra-choice", { t("from random import choice") }),
			s("fra-expovariate", { t("from random import expovariate") }),
			s("fra-gammavariate", { t("from random import gammavariate") }),
			s("fra-gauss", { t("from random import gauss") }),
			s("fra-getrandbits", { t("from random import getrandbits") }),
			s("fra-getstate", { t("from random import getstate") }),
			s("fra-lognormvariate", { t("from random import lognormvariate") }),
			s("fra-normalvariate", { t("from random import normalvariate") }),
			s("fra-paretovariate", { t("from random import paretovariate") }),
			s("fra-randbytes", { t("from random import randbytes") }),
			s("fra-randint", { t("from random import randint") }),
			s("fra-random", { t("from random import random") }),
			s("fra-randrange", { t("from random import randrange") }),
			s("fra-sample", { t("from random import sample") }),
			s("fra-seed", { t("from random import seed") }),
			s("fra-setstate", { t("from random import setstate") }),
			s("fra-shuffle", { t("from random import shuffle") }),
			s("fra-system-random", { t("from random import SystemRandom") }),
			s("fra-triangular", { t("from random import triangular") }),
			s("fra-uniform", { t("from random import uniform") }),
			s("fra-vonmisesvariate", { t("from random import vonmisesvariate") }),
			s("fra-weibullvariate", { t("from random import weibullvariate") }),

			-- standard library: re
			s("fre-findall", { t("from re import findall") }),
			s("fre-search", { t("from re import search") }),

			-- standard library: typing
			s("fty-annotated", { t("from typing import Annotated") }),
			s("fty-any", { t("from typing import Any") }),
			s("fty-any-str", { t("from typing import AnyStr") }),
			s("fty-assert-never", { t("from typing import assert_never") }),
			s("fty-assert-type", { t("from typing import assert_type") }),
			s("fty-binary-io", { t("from typing import BinaryIO") }),
			s("fty-cast", { t("from typing import cast") }),
			s("fty-class-var", { t("from typing import ClassVar") }),
			s("fty-clear-overloads", { t("from typing import clear_overloads") }),
			s("fty-concatenate", { t("from typing import Concatenate") }),
			s("fty-dataclass-transform", { t("from typing import dataclass_transform") }),
			s("fty-final", { t("from typing import Final") }),
			s("fty-final", { t("from typing import final") }),
			s("fty-forward-ref", { t("from typing import ForwardRef") }),
			s("fty-generic", { t("from typing import Generic") }),
			s("fty-get-args", { t("from typing import get_args") }),
			s("fty-get-origin", { t("from typing import get_origin") }),
			s("fty-get-original-bases", { t("from typing import get_original_bases") }),
			s("fty-get-overloads", { t("from typing import get_overloads") }),
			s("fty-get-type-hints", { t("from typing import get_type_hints") }),
			s("fty-io", { t("from typing import IO") }),
			s("fty-is-typeddict", { t("from typing import is_typeddict") }),
			s("fty-literal", { t("from typing import Literal") }),
			s("fty-literal-string", { t("from typing import LiteralString") }),
			s("fty-named-tuple", { t("from typing import NamedTuple") }),
			s("fty-never", { t("from typing import Never") }),
			s("fty-new-type", { t("from typing import NewType") }),
			s("fty-no-return", { t("from typing import NoReturn") }),
			s("fty-no-type-check", { t("from typing import no_type_check") }),
			s("fty-no-type-check-decorator", { t("from typing import no_type_check_decorator") }),
			s("fty-not-required", { t("from typing import NotRequired") }),
			s("fty-overload", { t("from typing import overload") }),
			s("fty-override", { t("from typing import override") }),
			s("fty-param-spec", { t("from typing import ParamSpec") }),
			s("fty-param-spec-args", { t("from typing import ParamSpecArgs") }),
			s("fty-param-spec-kwargs", { t("from typing import ParamSpecKwargs") }),
			s("fty-protocol", { t("from typing import Protocol") }),
			s("fty-required", { t("from typing import Required") }),
			s("fty-reveal-type", { t("from typing import reveal_type") }),
			s("fty-runtime-checkable", { t("from typing import runtime_checkable") }),
			s("fty-self", { t("from typing import Self") }),
			s("fty-supports-abs", { t("from typing import SupportsAbs") }),
			s("fty-supports-bytes", { t("from typing import SupportsBytes") }),
			s("fty-supports-complex", { t("from typing import SupportsComplex") }),
			s("fty-supports-float", { t("from typing import SupportsFloat") }),
			s("fty-supports-index", { t("from typing import SupportsIndex") }),
			s("fty-supports-int", { t("from typing import SupportsInt") }),
			s("fty-supports-round", { t("from typing import SupportsRound") }),
			s("fty-text-io", { t("from typing import TextIO") }),
			s("fty-type-alias", { t("from typing import TypeAlias") }),
			s("fty-type-alias-type", { t("from typing import TypeAliasType") }),
			s("fty-type-checking", { t("from typing import TYPE_CHECKING") }),
			s("fty-type-guard", { t("from typing import TypeGuard") }),
			s("fty-type-var", { t("from typing import TypeVar") }),
			s("fty-type-var-tuple", { t("from typing import TypeVarTuple") }),
			s("fty-typed-dict", { t("from typing import TypedDict") }),
			s("fty-union", { t("from typing import Union") }),
			s("fty-unpack", { t("from typing import Unpack") }),

			-- standard library: zoneinfo
			s("fzo-zoneinfo", { t("from zoneinfo import ZoneInfo") }),

			-- third party: beartype
			s("fbe-beartype", { t("from beartype import beartype") }),

			-- third party: bidict
			s("fbi-bidict", { t("from bidict import bidict") }),

			-- third party: cachetools
			s("fca-cache", { t("from cachetools import Cache") }),
			s("fca-cached", { t("from cachetools import cached") }),
			s("fca-cachedmethod", { t("from cachetools import cachedmethod") }),
			s("fca-fifo-cache", { t("from cachetools.func import fifo_cache") }),
			s("fca-hashkey", { t("from cachetools.keys import hashkey") }),
			s("fca-lfu-cache", { t("from cachetools.func import lfu_cache") }),
			s("fca-lru-cache", { t("from cachetools.func import lru_cache") }),
			s("fca-methodkey", { t("from cachetools.keys import methodkey") }),
			s("fca-mru-cache", { t("from cachetools.func import mru_cache") }),
			s("fca-rr-cache", { t("from cachetools.func import rr_cache") }),
			s("fca-tlru-cache", { t("from cachetools import TLRUCache") }),
			s("fca-ttl-cache", { t("from cachetools.func import ttl_cache") }),
			s("fca-typedkey", { t("from cachetools.keys import typedkey") }),

			-- third party: hypothesis
			s("fhy-array-dtypes", { t("from hypothesis.extra.numpy import array_dtypes") }),
			s("fhy-array-shapes", { t("from hypothesis.extra.numpy import array_shapes") }),
			s("fhy-arrays", { t("from hypothesis.extra.numpy import arrays") }),
			s("fhy-assume", { t("from hypothesis import assume") }),
			s("fhy-basic-indices", { t("from hypothesis.extra.numpy import basic_indices") }),
			s("fhy-binary", { t("from hypothesis.strategies import binary") }),
			s("fhy-boolean-dtypes", { t("from hypothesis.extra.numpy import boolean_dtypes") }),
			s("fhy-booleans", { t("from hypothesis.strategies import booleans") }),
			s("fhy-broadcastable-shapes", { t("from hypothesis.extra.numpy import broadcastable_shapes") }),
			s("fhy-builds", { t("from hypothesis.strategies import builds") }),
			s("fhy-byte-string-dtypes", { t("from hypothesis.extra.numpy import byte_string_dtypes") }),
			s("fhy-characters", { t("from hypothesis.strategies import characters") }),
			s("fhy-column", { t("from hypothesis.extra.pandas import column") }),
			s("fhy-columns", { t("from hypothesis.extra.pandas import columns") }),
			s("fhy-complex-number-dtypes", { t("from hypothesis.extra.numpy import complex_number_dtypes") }),
			s("fhy-complex-numbers", { t("from hypothesis.strategies import complex_numbers") }),
			s("fhy-composite", { t("from hypothesis.strategies import composite") }),
			s("fhy-currently-in-test-context", { t("from hypothesis import currently_in_test_context") }),
			s("fhy-data", { t("from hypothesis.strategies import data") }),
			s("fhy-data-frames", { t("from hypothesis.extra.pandas import data_frames") }),
			s("fhy-data-object", { t("from hypothesis.strategies import DataObject") }),
			s("fhy-dates", { t("from hypothesis.strategies import dates") }),
			s("fhy-datetime64-dtypes", { t("from hypothesis.extra.numpy import datetime64_dtypes") }),
			s("fhy-datetimes", { t("from hypothesis.strategies import datetimes") }),
			s("fhy-decimals", { t("from hypothesis.strategies import decimals") }),
			s("fhy-deferred", { t("from hypothesis.strategies import deferred") }),
			s("fhy-dictionaries", { t("from hypothesis.strategies import dictionaries") }),
			s("fhy-draw-fn", { t("from hypothesis.strategies import DrawFn") }),
			s("fhy-emails", { t("from hypothesis.strategies import emails") }),
			s("fhy-event", { t("from hypothesis import event") }),
			s("fhy-example", { t("from hypothesis import example") }),
			s("fhy-find", { t("from hypothesis import find") }),
			s("fhy-fixed-dictionaries", { t("from hypothesis.strategies import fixed_dictionaries") }),
			s("fhy-floating-dtypes", { t("from hypothesis.extra.numpy import floating_dtypes") }),
			s("fhy-floats", { t("from hypothesis.strategies import floats") }),
			s("fhy-fractions", { t("from hypothesis.strategies import fractions") }),
			s("fhy-from-dtype", { t("from hypothesis.extra.numpy import from_dtype") }),
			s("fhy-from-regex", { t("from hypothesis.strategies import from_regex") }),
			s("fhy-from-type", { t("from hypothesis.strategies import from_type") }),
			s("fhy-frozensets", { t("from hypothesis.strategies import frozensets") }),
			s("fhy-functions", { t("from hypothesis.strategies import functions") }),
			s("fhy-given", { t("from hypothesis import given") }),
			s("fhy-health-check", { t("from hypothesis import HealthCheck") }),
			s("fhy-indexes", { t("from hypothesis.extra.pandas import indexes") }),
			s("fhy-infer", { t("from hypothesis import infer") }),
			s("fhy-integer-array-indices", { t("from hypothesis.extra.numpy import integer_array_indices") }),
			s("fhy-integer-dtypes", { t("from hypothesis.extra.numpy import integer_dtypes") }),
			s("fhy-integers", { t("from hypothesis.strategies import integers") }),
			s("fhy-ip-addresses", { t("from hypothesis.strategies import ip_addresses") }),
			s("fhy-iterables", { t("from hypothesis.strategies import iterables") }),
			s("fhy-just", { t("from hypothesis.strategies import just") }),
			s("fhy-lists", { t("from hypothesis.strategies import lists") }),
			s(
				"fhy-mutually-broadcastable-shapes",
				{ t("from hypothesis.extra.numpy import mutually_broadcastable_shapes") }
			),
			s("fhy-nested-dtypes", { t("from hypothesis.extra.numpy import nested_dtypes") }),
			s("fhy-none", { t("from hypothesis.strategies import none") }),
			s("fhy-note", { t("from hypothesis import note") }),
			s("fhy-nothing", { t("from hypothesis.strategies import nothing") }),
			s("fhy-one-of", { t("from hypothesis.strategies import one_of") }),
			s("fhy-permutations", { t("from hypothesis.strategies import permutations") }),
			s("fhy-phase", { t("from hypothesis import Phase") }),
			s("fhy-random-module", { t("from hypothesis.strategies import random_module") }),
			s("fhy-randoms", { t("from hypothesis.strategies import randoms") }),
			s("fhy-range-indexes", { t("from hypothesis.extra.pandas import range_indexes") }),
			s("fhy-recursive", { t("from hypothesis.strategies import recursive") }),
			s("fhy-register-random", { t("from hypothesis import register_random") }),
			s("fhy-register-type-strategy", { t("from hypothesis.strategies import register_type_strategy") }),
			s("fhy-reject", { t("from hypothesis import reject") }),
			s("fhy-reproduce-failure", { t("from hypothesis import reproduce_failure") }),
			s("fhy-runner", { t("from hypothesis.strategies import runner") }),
			s("fhy-sampled-from", { t("from hypothesis.strategies import sampled_from") }),
			s("fhy-scalar-dtypes", { t("from hypothesis.extra.numpy import scalar_dtypes") }),
			s("fhy-search-strategy", { t("from hypothesis.strategies import SearchStrategy") }),
			s("fhy-seed", { t("from hypothesis import seed") }),
			s("fhy-series", { t("from hypothesis.extra.pandas import series") }),
			s("fhy-sets", { t("from hypothesis.strategies import sets") }),
			s("fhy-settings", { t("from hypothesis import settings") }),
			s("fhy-shared", { t("from hypothesis.strategies import shared") }),
			s("fhy-slices", { t("from hypothesis.strategies import slices") }),
			s("fhy-target", { t("from hypothesis import target") }),
			s("fhy-text", { t("from hypothesis.strategies import text") }),
			s("fhy-timedelta64-dtypes", { t("from hypothesis.extra.numpy import timedelta64_dtypes") }),
			s("fhy-timedeltas", { t("from hypothesis.strategies import timedeltas") }),
			s("fhy-times", { t("from hypothesis.strategies import times") }),
			s("fhy-timezone-keys", { t("from hypothesis.strategies import timezone_keys") }),
			s("fhy-timezones", { t("from hypothesis.strategies import timezones") }),
			s("fhy-tuples", { t("from hypothesis.strategies import tuples") }),
			s("fhy-unicode-string-dtypes", { t("from hypothesis.extra.numpy import unicode_string_dtypes") }),
			s("fhy-unsigned-integer-dtypes", { t("from hypothesis.extra.numpy import unsigned_integer_dtypes") }),
			s("fhy-uuids", { t("from hypothesis.strategies import uuids") }),
			s("fhy-valid-tuple-axes", { t("from hypothesis.extra.numpy import valid_tuple_axes") }),
			s("fhy-verbosity", { t("from hypothesis import Verbosity") }),

			-- third party: loguru
			s("flo-logger", { t("from loguru import logger") }),

			-- third party: numpy
			s("imnp", { t("import numpy as np") }),
			s("fnuarange", { t("from numpy import arange") }),
			s("fnuarray", { t("from numpy import array") }),
			s("fnuisfinite", { t("from numpy import isfinite") }),
			s("fnuisnan", { t("from numpy import isnan") }),
			s("fnunan", { t("from numpy import nan") }),
			s("fnundarray", { t("from numpy import ndarray") }),
			s("fnuones", { t("from numpy import ones") }),
			s("fnuoneslike", { t("from numpy import ones_like") }),
			s("fnutyndarray", { t("from numpy.typing import NDArray") }),
			s("fnuzeros", { t("from numpy import zeros") }),
			s("fnuzeroslike", { t("from numpy import zeros_like") }),

			-- third party: pandas
			s("im-pd", { t("import pandas as pd") }),
			s("fpa-assert-frame-equal", { t("from pandas.testing import assert_frame_equal") }),
			s("fpa-assert-index-equal", { t("from pandas.testing import assert_index_equal") }),
			s("fpa-assert-series-equal", { t("from pandas.testing import assert_series_equal") }),
			s("fpa-b-day", { t("from pandas.tseries.offsets import BDay") }),
			s("fpa-bdate-range", { t("from pandas import bdate_range") }),
			s("fpa-boolean-dtype", { t("from pandas import BooleanDtype") }),
			s("fpa-concat", { t("from pandas import concat") }),
			s("fpa-date-offset", { t("from pandas import DateOffset") }),
			s("fpa-date-range", { t("from pandas import date_range") }),
			s("fpa-datetime-index", { t("from pandas import DatetimeIndex") }),
			s("fpa-hour", { t("from pandas.tseries.offsets import Hour") }),
			s("fpa-index", { t("from pandas import Index") }),
			s("fpa-int64-dtype", { t("from pandas import Int64Dtype") }),
			s("fpa-micro", { t("from pandas.tseries.offsets import Micro") }),
			s("fpa-milli", { t("from pandas.tseries.offsets import Milli") }),
			s("fpa-minute", { t("from pandas.tseries.offsets import Minute") }),
			s("fpa-month-begin", { t("from pandas.tseries.offsets import MonthBegin") }),
			s("fpa-month-end", { t("from pandas.tseries.offsets import MonthEnd") }),
			s("fpa-multi-index", { t("from pandas import MultiIndex") }),
			s("fpa-na", { t("from pandas import NA") }),
			s("fpa-na-type", { t("from pandas._libs.missing import NAType") }),
			s("fpa-nano", { t("from pandas.tseries.offsets import Nano") }),
			s("fpa-option-context", { t("from pandas import option_context") }),
			s("fpa-qcut", { t("from pandas import qcut") }),
			s("fpa-range-index", { t("from pandas import RangeIndex") }),
			s("fpa-read-pickle", { t("from pandas import read_pickle") }),
			s("fpa-read-sql", { t("from pandas import read_sql") }),
			s("fpa-read-table", { t("from pandas import read_table") }),
			s("fpa-second", { t("from pandas.tseries.offsets import Second") }),
			s("fpa-set-option", { t("from pandas import set_option") }),
			s("fpa-string-dtype", { t("from pandas import StringDtype") }),
			s("fpa-timedelta", { t("from pandas import Timedelta") }),
			s("fpa-timedelta-index", { t("from pandas import TimedeltaIndex") }),
			s("fpa-timestamp", { t("from pandas import Timestamp") }),
			s("fpa-to-datetime", { t("from pandas import to_datetime") }),
			s("fpa-to-pickle", { t("from pandas import to_pickle") }),
			s("fpa-week", { t("from pandas.tseries.offsets import Week") }),

			-- third party: polars
			s("fpo-array", { t("from polars import Array") }),
			s("fpo-assert-frame-equal", { t("from polars.testing import assert_frame_equal") }),
			s("fpo-assert-frame-not-equal", { t("from polars.testing import assert_frame_not_equal") }),
			s("fpo-assert-series-equal", { t("from polars.testing import assert_series_equal") }),
			s("fpo-assert-series-not-equal", { t("from polars.testing import assert_series_not_equal") }),
			s("fpo-binary", { t("from polars import Binary") }),
			s("fpo-boolean", { t("from polars import Boolean") }),
			s("fpo-categorical", { t("from polars import Categorical") }),
			s("fpo-col", { t("from polars import col") }),
			s("fpo-config", { t("from polars import Config") }),
			s("fpo-data-frame", { t("from polars import DataFrame") }),
			s("fpo-date", { t("from polars import Date") }),
			s("fpo-datetime", { t("from polars import Datetime") }),
			s("fpo-decimal", { t("from polars import Decimal") }),
			s("fpo-duration", { t("from polars import Duration") }),
			s("fpo-float32", { t("from polars import Float32") }),
			s("fpo-float64", { t("from polars import Float64") }),
			s("fpo-int16", { t("from polars import Int16") }),
			s("fpo-int32", { t("from polars import Int32") }),
			s("fpo-int64", { t("from polars import Int64") }),
			s("fpo-int8", { t("from polars import Int8") }),
			s("fpo-list", { t("from polars import List") }),
			s("fpo-lit", { t("from polars import lit") }),
			s("fpo-null", { t("from polars import Null") }),
			s("fpo-object", { t("from polars import Object") }),
			s("fpo-polars-data-type", { t("from polars.type_aliases import PolarsDataType") }),
			s("fpo-read-avro", { t("from polars import read_avro") }),
			s("fpo-read-csv", { t("from polars import read_csv") }),
			s("fpo-read-csv-batched", { t("from polars import read_csv_batched") }),
			s("fpo-read-database", { t("from polars import read_database") }),
			s("fpo-read-database-uri", { t("from polars import read_database_uri") }),
			s("fpo-read-delta", { t("from polars import read_delta") }),
			s("fpo-read-excel", { t("from polars import read_excel") }),
			s("fpo-read-ipc", { t("from polars import read_ipc") }),
			s("fpo-read-ipc-schema", { t("from polars import read_ipc_schema") }),
			s("fpo-read-ipc-stream", { t("from polars import read_ipc_stream") }),
			s("fpo-read-json", { t("from polars import read_json") }),
			s("fpo-read-ndjson", { t("from polars import read_ndjson") }),
			s("fpo-read-ods", { t("from polars import read_ods") }),
			s("fpo-read-parquet", { t("from polars import read_parquet") }),
			s("fpo-schema-dict", { t("from polars.type_aliases import SchemaDict") }),
			s("fpo-series", { t("from polars import Series") }),
			s("fpo-struct", { t("from polars import Struct") }),
			s("fpo-time", { t("from polars import Time") }),
			s("fpo-uint16", { t("from polars import UInt16") }),
			s("fpo-uint32", { t("from polars import UInt32") }),
			s("fpo-uint64", { t("from polars import UInt64") }),
			s("fpo-uint8", { t("from polars import UInt8") }),
			s("fpo-unknown", { t("from polars import Unknown") }),
			s("fpo-utf8", { t("from polars import Utf8") }),
			s("fpo-when", { t("from polars import when") }),

			-- third party: pprint
			s("fpp-isreadable", { t("from pprint import isreadable") }),
			s("fpp-isrecursive", { t("from pprint import isrecursive") }),
			s("fpp-pformat", { t("from pprint import pformat") }),
			s("fpp-pp", { t("from pprint import pp") }),
			s("fpp-pprint", { t("from pprint import pprint") }),
			s("fpp-pretty-printer", { t("from pprint import PrettyPrinter") }),
			s("fpp-saferepr", { t("from pprint import saferepr") }),

			-- third party: pydantic
			s("fpy-base-model", { t("from pydantic import BaseModel") }),

			-- third party: pytest
			s("fpy-fixture", { t("from pytest import fixture") }),
			s("fpy-mark", { t("from pytest import mark") }),
			s("fpy-mark-and-param", { t("from pytest import mark, param") }),
			s("fpy-param", { t("from pytest import param") }),
			s("fpy-raises", { t("from pytest import raises") }),

			-- third party: streamlit
			s("fst-altair-chart", { t("from streamlit import altair_chart") }),
			s("fst-area-chart", { t("from streamlit import area_chart") }),
			s("fst-audio", { t("from streamlit import audio") }),
			s("fst-balloons", { t("from streamlit import balloons") }),
			s("fst-bar-chart", { t("from streamlit import bar_chart") }),
			s("fst-bokeh-chart", { t("from streamlit import bokeh_chart") }),
			s("fst-button", { t("from streamlit import button") }),
			s("fst-cache", { t("from streamlit import cache") }),
			s("fst-cache-data", { t("from streamlit import cache_data") }),
			s("fst-cache-resource", { t("from streamlit import cache_resource") }),
			s("fst-camera-input", { t("from streamlit import camera_input") }),
			s("fst-caption", { t("from streamlit import caption") }),
			s("fst-chat-input", { t("from streamlit import chat_input") }),
			s("fst-chat-message", { t("from streamlit import chat_message") }),
			s("fst-checkbox", { t("from streamlit import checkbox") }),
			s("fst-code", { t("from streamlit import code") }),
			s("fst-color-picker", { t("from streamlit import color_picker") }),
			s("fst-column-config", { t("from streamlit import column_config") }),
			s("fst-columns", { t("from streamlit import columns") }),
			s("fst-connection", { t("from streamlit import connection") }),
			s("fst-container", { t("from streamlit import container") }),
			s("fst-data-editor", { t("from streamlit import data_editor") }),
			s("fst-dataframe", { t("from streamlit import dataframe") }),
			s("fst-date-input", { t("from streamlit import date_input") }),
			s("fst-divider", { t("from streamlit import divider") }),
			s("fst-download-button", { t("from streamlit import download_button") }),
			s("fst-echo", { t("from streamlit import echo") }),
			s("fst-empty", { t("from streamlit import empty") }),
			s("fst-error", { t("from streamlit import error") }),
			s("fst-exception", { t("from streamlit import exception") }),
			s("fst-expander", { t("from streamlit import expander") }),
			s("fst-file-uploader", { t("from streamlit import file_uploader") }),
			s("fst-form", { t("from streamlit import form") }),
			s("fst-form-submit-button", { t("from streamlit import form_submit_button") }),
			s("fst-graphviz-chart", { t("from streamlit import graphviz_chart") }),
			s("fst-header", { t("from streamlit import header") }),
			s("fst-help", { t("from streamlit import help") }),
			s("fst-image", { t("from streamlit import image") }),
			s("fst-info", { t("from streamlit import info") }),
			s("fst-json", { t("from streamlit import json") }),
			s("fst-latex", { t("from streamlit import latex") }),
			s("fst-line-chart", { t("from streamlit import line_chart") }),
			s("fst-link-button", { t("from streamlit import link_button") }),
			s("fst-map", { t("from streamlit import map") }),
			s("fst-markdown", { t("from streamlit import markdown") }),
			s("fst-metric", { t("from streamlit import metric") }),
			s("fst-number-input", { t("from streamlit import number_input") }),
			s("fst-plotly-chart", { t("from streamlit import plotly_chart") }),
			s("fst-progress", { t("from streamlit import progress") }),
			s("fst-pydeck-chart", { t("from streamlit import pydeck_chart") }),
			s("fst-pyplot", { t("from streamlit import pyplot") }),
			s("fst-radio", { t("from streamlit import radio") }),
			s("fst-rerun", { t("from streamlit import rerun") }),
			s("fst-scatter-chart", { t("from streamlit import scatter_chart") }),
			s("fst-secrets", { t("from streamlit import secrets") }),
			s("fst-select-slider", { t("from streamlit import select_slider") }),
			s("fst-selectbox", { t("from streamlit import selectbox") }),
			s("fst-session-state", { t("from streamlit import session_state") }),
			s("fst-set-page-config", { t("from streamlit import set_page_config") }),
			s("fst-sidebar", { t("from streamlit import sidebar") }),
			s("fst-snow", { t("from streamlit import snow") }),
			s("fst-spinner", { t("from streamlit import spinner") }),
			s("fst-status", { t("from streamlit import status") }),
			s("fst-stop", { t("from streamlit import stop") }),
			s("fst-subheader", { t("from streamlit import subheader") }),
			s("fst-success", { t("from streamlit import success") }),
			s("fst-table", { t("from streamlit import table") }),
			s("fst-tabs", { t("from streamlit import tabs") }),
			s("fst-text", { t("from streamlit import text") }),
			s("fst-text-area", { t("from streamlit import text_area") }),
			s("fst-text-input", { t("from streamlit import text_input") }),
			s("fst-time-input", { t("from streamlit import time_input") }),
			s("fst-title", { t("from streamlit import title") }),
			s("fst-toast", { t("from streamlit import toast") }),
			s("fst-toggle", { t("from streamlit import toggle") }),
			s("fst-vega-lite-chart", { t("from streamlit import vega_lite_chart") }),
			s("fst-video", { t("from streamlit import video") }),
			s("fst-write", { t("from streamlit import write") }),

			-- third party: tabulate
			s("fta-tabulate", { t("from tabulate import tabulate") }),

			-- third party: typed-settings
			s("fty-settings", { t("from typed_settings import settings") }),

			-- third party: typing-extensions
			s("ftye-assert-never", { t("from typing_extensions import assert_never") }),
			s("ftye-assert-type", { t("from typing_extensions import assert_type") }),
			s("ftye-clear-overloads", { t("from typing_extensions import clear_overloads") }),
			s("ftye-dataclass-transform", { t("from typing_extensions import dataclass_transform") }),
			s("ftye-doc", { t("from typing_extensions import Doc") }),
			s("ftye-get-original-bases", { t("from typing_extensions import get_original_bases") }),
			s("ftye-get-overloads", { t("from typing_extensions import get_overloads") }),
			s("ftye-get-protocol-members", { t("from typing_extensions import get_protocol_members") }),
			s("ftye-literal-string", { t("from typing_extensions import LiteralString") }),
			s("ftye-named-tuple", { t("from typing_extensions import NamedTuple") }),
			s("ftye-never", { t("from typing_extensions import Never") }),
			s("ftye-not-required", { t("from typing_extensions import NotRequired") }),
			s("ftye-overload", { t("from typing_extensions import overload") }),
			s("ftye-override", { t("from typing_extensions import override") }),
			s("ftye-required", { t("from typing_extensions import Required") }),
			s("ftye-reveal-type", { t("from typing_extensions import reveal_type") }),
			s("ftye-self", { t("from typing_extensions import Self") }),
			s("ftye-type-alias-type", { t("from typing_extensions import TypeAliasType") }),
			s("ftye-type-var-tuple", { t("from typing_extensions import TypeVarTuple") }),
			s("ftye-unpack", { t("from typing_extensions import Unpack") }),

			-- third party: (dycw-)utilities.airium
			s("fut-yield-airium", { t("from utilities.airium import yield_airium") }),

			-- third party: (dycw-)utilities.atomicwrites
			s("fut-writer", { t("from utilities.atomicwrites import writer") }),

			-- third party: (dycw-)utilities.class_name
			s("fut-get-class-name", { t("from utilities.class_name import get_class_name") }),

			-- third party: (dycw-)utilities.cryptography
			s("fut-decrypt", { t("from utilities.cryptography import decrypt") }),
			s("fut-encrypt", { t("from utilities.cryptography import encrypt") }),
			s("fut-fernet-key-missing-error", { t("from utilities.cryptography import FernetKeyMissingError") }),

			-- third party: (dycw-)utilities.datetime
			s("fut-add-weekdays", { t("from utilities.datetime import add_weekdays") }),
			s("fut-date-to-datetime", { t("from utilities.datetime import date_to_datetime") }),
			s("fut-duration-to-float", { t("from utilities.datetime import duration_to_float") }),
			s("fut-duration-to-timedelta", { t("from utilities.datetime import duration_to_timedelta") }),
			s("fut-ensure-date", { t("from utilities.datetime import ensure_date") }),
			s("fut-ensure-datetime", { t("from utilities.datetime import ensure_datetime") }),
			s("fut-ensure-time", { t("from utilities.datetime import ensure_time") }),
			s("fut-ensure-timedelta", { t("from utilities.datetime import ensure_timedelta") }),
			s("fut-epoch-utc", { t("from utilities.datetime import EPOCH_UTC") }),
			s("fut-get-now", { t("from utilities.datetime import get_now") }),
			s("fut-get-today", { t("from utilities.datetime import get_today") }),
			s("fut-is-weekday", { t("from utilities.datetime import is_weekday") }),
			s("fut-is-weekend-error", { t("from utilities.datetime import IsWeekendError") }),
			s("fut-local-time-zone-error", { t("from utilities.datetime import LocalTimeZoneError") }),
			s("fut-local-timezone", { t("from utilities.datetime import local_timezone") }),
			s("fut-maybe-sub-pct-y", { t("from utilities.datetime import maybe_sub_pct_y") }),
			s("fut-now-hkg", { t("from utilities.datetime import NOW_HKG") }),
			s("fut-now-tky", { t("from utilities.datetime import NOW_TKY") }),
			s("fut-now-utc", { t("from utilities.datetime import NOW_UTC") }),
			s("fut-parse-date", { t("from utilities.datetime import parse_date") }),
			s("fut-parse-date-error", { t("from utilities.datetime import ParseDateError") }),
			s("fut-parse-date-time-error", { t("from utilities.datetime import ParseDateTimeError") }),
			s("fut-parse-datetime", { t("from utilities.datetime import parse_datetime") }),
			s("fut-parse-time", { t("from utilities.datetime import parse_time") }),
			s("fut-parse-time-error", { t("from utilities.datetime import ParseTimeError") }),
			s("fut-parse-timedelta", { t("from utilities.datetime import parse_timedelta") }),
			s("fut-parse-timedelta-error", { t("from utilities.datetime import ParseTimedeltaError") }),
			s("fut-round-to-next-weekday", { t("from utilities.datetime import round_to_next_weekday") }),
			s("fut-round-to-prev-weekday", { t("from utilities.datetime import round_to_prev_weekday") }),
			s("fut-serialize-date", { t("from utilities.datetime import serialize_date") }),
			s("fut-serialize-datetime", { t("from utilities.datetime import serialize_datetime") }),
			s("fut-serialize-time", { t("from utilities.datetime import serialize_time") }),
			s("fut-serialize-timedelta", { t("from utilities.datetime import serialize_timedelta") }),
			s("fut-today-hkg", { t("from utilities.datetime import TODAY_HKG") }),
			s("fut-today-tky", { t("from utilities.datetime import TODAY_TKY") }),
			s("fut-today-utc", { t("from utilities.datetime import TODAY_UTC") }),
			s("fut-utc", { t("from utilities.datetime import UTC") }),
			s("fut-yield-weekdays", { t("from utilities.datetime import yield_weekdays") }),
			s("fut-yield-weekdays-error", { t("from utilities.datetime import YieldWeekdaysError") }),

			-- third party: (dycw-)utilities.errors
			s("fut-directory-exists-error", { t("from utilities.errors import DirectoryExistsError") }),
			s("fut-no-unique-arg-error", { t("from utilities.errors import NoUniqueArgError") }),
			s("fut-redirect-error", { t("from utilities.errors import redirect_error") }),
			s("fut-retry", { t("from utilities.errors import retry") }),

			-- third party: (dycw-)utilities.functools
			s("fut-partial", { t("from utilities.functools import partial") }),

			-- third party: (dycw-)utilities.getpass
			s("fut-user", { t("from utilities.getpass import USER") }),

			-- third party: (dycw-)utilities.git
			s("fut-get-branch-name", { t("from utilities.git import get_branch_name") }),
			s("fut-get-repo-name", { t("from utilities.git import get_repo_name") }),
			s("fut-get-repo-root", { t("from utilities.git import get_repo_root") }),
			s("fut-invalid-repo-error", { t("from utilities.git import InvalidRepoError") }),

			-- third party: (dycw-)utilities.hashlib
			s("fut-md5-hash", { t("from utilities.hashlib import md5_hash") }),

			-- third party: (dycw-)utilities.itertools
			s("fut-always-iterable", { t("from utilities.itertools import always_iterable") }),
			s("fut-check-duplicates", { t("from utilities.itertools import check_duplicates") }),
			s("fut-chunked", { t("from utilities.itertools import chunked") }),
			s("fut-empty-iterable-error", { t("from utilities.itertools import EmptyIterableError") }),
			s("fut-is-iterable-not-str", { t("from utilities.itertools import is_iterable_not_str") }),
			s(
				"fut-iterable-contains-duplicates-error",
				{ t("from utilities.itertools import IterableContainsDuplicatesError") }
			),
			s("fut-multiple-elements-error", { t("from utilities.itertools import MultipleElementsError") }),
			s("fut-one", { t("from utilities.itertools import one") }),
			s("fut-take", { t("from utilities.itertools import take") }),

			-- third party: (dycw-)utilities.json
			s("fut-deserialize", { t("from utilities.json import deserialize") }),
			s("fut-serialize", { t("from utilities.json import serialize") }),

			-- third party: (dycw-)utilities.logging
			s("fut-basic-config", { t("from utilities.logging import basic_config") }),
			s("fut-log-level", { t("from utilities.logging import LogLevel") }),

			-- third party: (dycw-)utilities.luigi
			s("fut-ambiguous-date-error", { t("from utilities.luigi import AmbiguousDateError") }),
			s("fut-ambiguous-datetime-error", { t("from utilities.luigi import AmbiguousDatetimeError") }),
			s("fut-await-task", { t("from utilities.luigi import AwaitTask") }),
			s("fut-await-time", { t("from utilities.luigi import AwaitTime") }),
			s("fut-build", { t("from utilities.luigi import build") }),
			s("fut-build-params-mixin", { t("from utilities.luigi import build_params_mixin") }),
			s("fut-clone", { t("from utilities.luigi import clone") }),
			s("fut-database-target", { t("from utilities.luigi import DatabaseTarget") }),
			s("fut-date-hour-parameter", { t("from utilities.luigi import DateHourParameter") }),
			s("fut-date-minute-parameter", { t("from utilities.luigi import DateMinuteParameter") }),
			s("fut-date-parameter", { t("from utilities.luigi import DateParameter") }),
			s("fut-date-second-parameter", { t("from utilities.luigi import DateSecondParameter") }),
			s("fut-engine-parameter", { t("from utilities.luigi import EngineParameter") }),
			s("fut-enum-parameter", { t("from utilities.luigi import EnumParameter") }),
			s("fut-external-file", { t("from utilities.luigi import ExternalFile") }),
			s("fut-external-task", { t("from utilities.luigi import ExternalTask") }),
			s("fut-get-dependencies-downstream", { t("from utilities.luigi import get_dependencies_downstream") }),
			s("fut-get-dependencies-upstream", { t("from utilities.luigi import get_dependencies_upstream") }),
			s("fut-get-task-classes", { t("from utilities.luigi import get_task_classes") }),
			s(
				"fut-invalid-annotation-and-keywords-error",
				{ t("from utilities.luigi import InvalidAnnotationAndKeywordsError") }
			),
			s("fut-invalid-annotation-error", { t("from utilities.luigi import InvalidAnnotationError") }),
			s("fut-path-target", { t("from utilities.luigi import PathTarget") }),
			s("fut-table-parameter", { t("from utilities.luigi import TableParameter") }),
			s("fut-time-parameter", { t("from utilities.luigi import TimeParameter") }),
			s("fut-version-parameter", { t("from utilities.luigi import VersionParameter") }),
			s("fut-weekday-parameter", { t("from utilities.luigi import WeekdayParameter") }),

			-- third party: (dycw-)utilities.pickle
			s("fut-ensure-suffix", { t("from utilities.pathlib import ensure_suffix") }),
			s("fut-path-like", { t("from utilities.pathlib import PathLike") }),
			s("fut-temp-cwd", { t("from utilities.pathlib import temp_cwd") }),
			s("fut-walk", { t("from utilities.pathlib import walk") }),

			-- third party: (dycw-)utilities.pickle
			s("fut-read-pickle", { t("from utilities.pickle import read_pickle") }),
			s("fut-write-pickle", { t("from utilities.pickle import write_pickle") }),

			-- third party: (dycw-)utilities.polars
			s("fut-check-dataframe", { t("from utilities.polars import check_dataframe") }),
			s("fut-data-frame-columns-error", { t("from utilities.polars import DataFrameColumnsError") }),
			s("fut-data-frame-dtypes-error", { t("from utilities.polars import DataFrameDTypesError") }),
			s("fut-data-frame-height-error", { t("from utilities.polars import DataFrameHeightError") }),
			s("fut-data-frame-max-height-error", { t("from utilities.polars import DataFrameMaxHeightError") }),
			s("fut-data-frame-min-height-error", { t("from utilities.polars import DataFrameMinHeightError") }),
			s("fut-data-frame-schema-error", { t("from utilities.polars import DataFrameSchemaError") }),
			s("fut-data-frame-shape-error", { t("from utilities.polars import DataFrameShapeError") }),
			s("fut-data-frame-sorted-error", { t("from utilities.polars import DataFrameSortedError") }),
			s("fut-data-frame-unique-error", { t("from utilities.polars import DataFrameUniqueError") }),
			s("fut-data-frame-width-error", { t("from utilities.polars import DataFrameWidthError") }),
			s("fut-empty-data-frame-error", { t("from utilities.polars import EmptyDataFrameError") }),
			s("fut-multiple-th-rows-error", { t("from utilities.polars import MultipleTHRowsError") }),
			s("fut-set-first-row-as-columns", { t("from utilities.polars import set_first_row_as_columns") }),
			s("fut-yield-tables", { t("from utilities.polars import yield_tables") }),

			-- third party: (dycw-)utilities.re
			s("fut-extract-group", { t("from utilities.re import extract_group") }),
			s("fut-extract-groups", { t("from utilities.re import extract_groups") }),
			s("fut-multiple-capture-groups-error", { t("from utilities.re import MultipleCaptureGroupsError") }),
			s("fut-multiple-matches-error", { t("from utilities.re import MultipleMatchesError") }),
			s("fut-no-capture-groups-error", { t("from utilities.re import NoCaptureGroupsError") }),
			s("fut-no-matches-error", { t("from utilities.re import NoMatchesError") }),

			-- third party: (dycw-)utilities.sentinel
			s("fut-sentinel", { t("from utilities.sentinel import sentinel") }),

			-- third party: (dycw-)utilities.tempfile
			s("fut-gettempdir", { t("from utilities.tempfile import gettempdir") }),
			s("fut-temp-dir", { t("from utilities.tempfile import TEMP_DIR") }),
			s("fut-temporary-directory", { t("from utilities.tempfile import TemporaryDirectory") }),

			-- third party: (dycw-)utilities.text
			s("fut-ensure-str", { t("from utilities.text import ensure_str") }),
			s("fut-not-a-string-error", { t("from utilities.text import NotAStringError") }),
			s("fut-snake-case", { t("from utilities.text import snake_case") }),
			s(
				"fut-snake-case-contains-duplicates-error",
				{ t("from utilities.text import SnakeCaseContainsDuplicatesError") }
			),
			s("fut-snake-case-mappings", { t("from utilities.text import snake_case_mappings") }),
			s("fut-strip-and-dedent", { t("from utilities.text import strip_and_dedent") }),

			-- third party: (dycw-)utilities.timer
			s("fut-timer", { t("from utilities.timer import Timer") }),

			-- third party: (dycw-)utilities.typed_settings
			s(
				"fut-app-name-contains-underscore-error",
				{ t("from utilities.typed_settings import AppNameContainsUnderscoreError") }
			),
			s("fut-click-field", { t("from utilities.typed_settings import click_field") }),
			s("fut-click-options", { t("from utilities.typed_settings import click_options") }),
			s("fut-get-repo-root-config", { t("from utilities.typed_settings import get_repo_root_config") }),
			s("fut-load-settings", { t("from utilities.typed_settings import load_settings") }),

			-- third party: (dycw-)utilities.typing
			s("fut-iterable-strs", { t("from utilities.typing import IterableStrs") }),
			s("fut-number", { t("from utilities.typing import Number") }),
			s("fut-sequence-strs", { t("from utilities.typing import SequenceStrs") }),

			-- third party: (dycw-)utilities.zoneinfo
			s("fut-hong-kong", { t("from utilities.zoneinfo import HONG_KONG") }),
			s("fut-tokyo", { t("from utilities.zoneinfo import TOKYO") }),

			-- third party: xarray
			s("fxa-data-array", { t("from xarray import DataArray") }),
			s("fxa-datasetl", { t("from xarray import Dataset") }),
		})
	end,
}
