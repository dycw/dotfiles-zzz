return {
	"L3MON4D3/LuaSnip",
	config = function()
		local ls = require("luasnip")
		local s = ls.snippet
		local t = ls.text_node
		ls.add_snippets("python", {
			-- generic
			s("bp", { t("breakpoint()") }),

			-- standard library: abc
			s("fab-abc", { t("from abc import ABC") }),
			s("fab-abc-meta", { t("from abc import ABCMeta") }),
			s("fab-abstractclassmethod", { t("from abc import abstractclassmethod") }),
			s("fab-abstractmethod", { t("from abc import abstractmethod") }),
			s("fab-abstractproperty", { t("from abc import abstractproperty") }),
			s("fab-abstractstaticmethod", { t("from abc import abstractstaticmethod") }),
			s("fab-get-cache-token", { t("from abc import get_cache_token") }),
			s("fab-update-abstractmethods", { t("from abc import update_abstractmethods") }),

			-- standard library: argparse
			s("far-argument-parser", { t("from argparse import ArgumentParser") }),

			-- standard library: collections
			s("fco-async-generator", { t("from collections.abc import AsyncGenerator") }),
			s("fco-async-iterable", { t("from collections.abc import AsyncIterable") }),
			s("fco-async-iterator", { t("from collections.abc import AsyncIterator") }),
			s("fco-awaitable", { t("from collections.abc import Awaitable") }),
			s("fco-buffer", { t("from collections.abc import Buffer") }),
			s("fco-callable", { t("from collections.abc import Callable") }),
			s("fco-chain-map", { t("from collections import ChainMap") }),
			s("fco-collection", { t("from collections.abc import Collection") }),
			s("fco-container", { t("from collections.abc import Container") }),
			s("fco-counter", { t("from collections import Counter") }),
			s("fco-defaultdict", { t("from collections import defaultdict") }),
			s("fco-deque", { t("from collections import deque") }),
			s("fco-generator", { t("from collections.abc import Generator") }),
			s("fco-hashable", { t("from collections.abc import Hashable") }),
			s("fco-items-view", { t("from collections.abc import ItemsView") }),
			s("fco-iterable", { t("from collections.abc import Iterable") }),
			s("fco-iterator", { t("from collections.abc import Iterator") }),
			s("fco-keys-view", { t("from collections.abc import KeysView") }),
			s("fco-mapping", { t("from collections.abc import Mapping") }),
			s("fco-mapping-view", { t("from collections.abc import MappingView") }),
			s("fco-mutable-mapping", { t("from collections.abc import MutableMapping") }),
			s("fco-mutable-sequence", { t("from collections.abc import MutableSequence") }),
			s("fco-mutable-set", { t("from collections.abc import MutableSet") }),
			s("fco-namedtuple", { t("from collections import namedtuple") }),
			s("fco-ordered-dict", { t("from collections import OrderedDict") }),
			s("fco-reversible", { t("from collections.abc import Reversible") }),
			s("fco-sequence", { t("from collections.abc import Sequence") }),
			s("fco-set", { t("from collections.abc import Set as AbstractSet") }),
			s("fco-sized", { t("from collections.abc import Sized") }),
			s("fco-user-dict", { t("from collections import UserDict") }),
			s("fco-user-list", { t("from collections import UserList") }),
			s("fco-user-string", { t("from collections import UserString") }),
			s("fco-values-view", { t("from collections.abc import ValuesView") }),

			-- standard library: contextlib
			s("fco-abstract-async-context-manager", { t("from contextlib import AbstractAsyncContextManager") }),
			s("fco-abstract-context-manager", { t("from contextlib import AbstractContextManager") }),
			s("fco-aclosing", { t("from contextlib import aclosing") }),
			s("fco-asynccontextmanager", { t("from contextlib import asynccontextmanager") }),
			s("fco-chdir", { t("from contextlib import chdir") }),
			s("fco-closing", { t("from contextlib import closing") }),
			s("fco-contextmanager", { t("from contextlib import contextmanager") }),
			s("fco-nullcontext", { t("from contextlib import nullcontext") }),
			s("fco-redirect-stderr", { t("from contextlib import redirect_stderr") }),
			s("fco-redirect-stdout", { t("from contextlib import redirect_stdout") }),
			s("fco-suppress", { t("from contextlib import suppress") }),

			-- standard library: csv
			s("fcs-dialect", { t("from csv import Dialect") }),
			s("fcs-dict-reader", { t("from csv import DictReader") }),
			s("fcs-dict-writer", { t("from csv import DictWriter") }),
			s("fcs-excel", { t("from csv import excel") }),
			s("fcs-excel-tab", { t("from csv import excel_tab") }),
			s("fcs-field-size-limit", { t("from csv import field_size_limit") }),
			s("fcs-list-dialects", { t("from csv import list_dialects") }),
			s("fcs-quote-all", { t("from csv import QUOTE_ALL") }),
			s("fcs-quote-minimal", { t("from csv import QUOTE_MINIMAL") }),
			s("fcs-quote-none", { t("from csv import QUOTE_NONE") }),
			s("fcs-quote-nonnumeric", { t("from csv import QUOTE_NONNUMERIC") }),
			s("fcs-reader", { t("from csv import reader") }),
			s("fcs-register-dialect", { t("from csv import register_dialect") }),
			s("fcs-sniffer", { t("from csv import Sniffer") }),
			s("fcs-unix-dialect", { t("from csv import unix_dialect") }),
			s("fcs-unregister-dialect", { t("from csv import unregister_dialect") }),
			s("fcs-writer", { t("from csv import writer") }),

			-- standard library: dataclasses
			s("fda-asdict", { t("from dataclasses import asdict") }),
			s("fda-astuple", { t("from dataclasses import astuple") }),
			s("fda-dataclass", { t("from dataclasses import dataclass") }),
			s("fda-field", { t("from dataclasses import field") }),
			s("fda-fields", { t("from dataclasses import fields") }),
			s("fda-frozen-instance-error", { t("from dataclasses import FrozenInstanceError") }),
			s("fda-is-dataclass", { t("from dataclasses import is_dataclass") }),
			s("fda-kw-only", { t("from dataclasses import KW_ONLY") }),
			s("fda-make-dataclass", { t("from dataclasses import make_dataclass") }),
			s("fda-missing", { t("from dataclasses import MISSING") }),
			s("fda-replace", { t("from dataclasses import replace") }),

			-- standard library: datetime
			s("imdt", { t("import datetime as dt") }),

			-- standard library: enum
			s("fen-auto", { t("from enum import auto") }),
			s("fen-enum", { t("from enum import Enum") }),
			s("fen-enum-check", { t("from enum import EnumCheck") }),
			s("fen-enum-meta", { t("from enum import EnumMeta") }),
			s("fen-flag", { t("from enum import Flag") }),
			s("fen-flag-boundary", { t("from enum import FlagBoundary") }),
			s("fen-global-enum", { t("from enum import global_enum") }),
			s("fen-int-enum", { t("from enum import IntEnum") }),
			s("fen-int-flag", { t("from enum import IntFlag") }),
			s("fen-member", { t("from enum import member") }),
			s("fen-nonmember", { t("from enum import nonmember") }),
			s("fen-property", { t("from enum import property") }),
			s("fen-repr-enum", { t("from enum import ReprEnum") }),
			s("fen-show-flag-values", { t("from enum import show_flag_values") }),
			s("fen-str-enum", { t("from enum import StrEnum") }),
			s("fen-unique", { t("from enum import unique") }),
			s("fen-verify", { t("from enum import verify") }),

			-- standard library: functools
			s("ffu-cache", { t("from functools import cache") }),
			s("ffu-cached-property", { t("from functools import cached_property") }),
			s("ffu-cmp-to-key", { t("from functools import cmp_to_key") }),
			s("ffu-lru-cache", { t("from functools import lru_cache") }),
			s("ffu-partial", { t("from functools import partial") }),
			s("ffu-partialmethod", { t("from functools import partialmethod") }),
			s("ffu-reduce", { t("from functools import reduce") }),
			s("ffu-singledispatch", { t("from functools import singledispatch") }),
			s("ffu-singledispatchmethod", { t("from functools import singledispatchmethod") }),
			s("ffu-total-ordering", { t("from functools import total_ordering") }),
			s("ffu-update-wrapper", { t("from functools import update_wrapper") }),
			s("ffu-wraps", { t("from functools import wraps") }),

			-- standard library: future
			s("ffu-annotations", { t("from __future__ import annotations") }),

			-- standard library: gzip
			s("fgz-bad-gzip-file", { t("from gzip import BadGzipFile") }),
			s("fgz-compress", { t("from gzip import compress") }),
			s("fgz-decompress", { t("from gzip import decompress") }),
			s("fgz-gzip-file", { t("from gzip import GzipFile") }),

			-- standard library: hashlib
			s("fha-algorithms-available", { t("from hashlib import algorithms_available") }),
			s("fha-algorithms-guaranteed", { t("from hashlib import algorithms_guaranteed") }),
			s("fha-blake2b", { t("from hashlib import blake2b") }),
			s("fha-blake2s", { t("from hashlib import blake2s") }),
			s("fha-file-digest", { t("from hashlib import file_digest") }),
			s("fha-md5", { t("from hashlib import md5") }),
			s("fha-new", { t("from hashlib import new") }),
			s("fha-pbkdf2-hmac", { t("from hashlib import pbkdf2_hmac") }),
			s("fha-scrypt", { t("from hashlib import scrypt") }),
			s("fha-sha1", { t("from hashlib import sha1") }),
			s("fha-sha224", { t("from hashlib import sha224") }),
			s("fha-sha256", { t("from hashlib import sha256") }),
			s("fha-sha3-224", { t("from hashlib import sha3_224") }),
			s("fha-sha3-256", { t("from hashlib import sha3_256") }),
			s("fha-sha3-384", { t("from hashlib import sha3_384") }),
			s("fha-sha3-512", { t("from hashlib import sha3_512") }),
			s("fha-sha384", { t("from hashlib import sha384") }),
			s("fha-sha512", { t("from hashlib import sha512") }),
			s("fha-shake-128", { t("from hashlib import shake_128") }),
			s("fha-shake-256", { t("from hashlib import shake_256") }),

			-- standard library: importlib
			s("fim-all-suffixes", { t("from importlib.machinery import all_suffixes") }),
			s("fim-builtin-importer", { t("from importlib.machinery import BuiltinImporter") }),
			s("fim-bytecode-suffixes", { t("from importlib.machinery import BYTECODE_SUFFIXES") }),
			s("fim-cache-from-source", { t("from importlib.util import cache_from_source") }),
			s("fim-debug-bytecode-suffixes", { t("from importlib.machinery import DEBUG_BYTECODE_SUFFIXES") }),
			s("fim-decode-source", { t("from importlib.util import decode_source") }),
			s("fim-execution-loader", { t("from importlib.abc import ExecutionLoader") }),
			s("fim-extension-file-loader", { t("from importlib.machinery import ExtensionFileLoader") }),
			s("fim-extension-suffixes", { t("from importlib.machinery import EXTENSION_SUFFIXES") }),
			s("fim-file-finder", { t("from importlib.machinery import FileFinder") }),
			s("fim-file-loader", { t("from importlib.abc import FileLoader") }),
			s("fim-find-loader", { t("from importlib import find_loader") }),
			s("fim-find-spec", { t("from importlib.util import find_spec") }),
			s("fim-frozen-importer", { t("from importlib.machinery import FrozenImporter") }),
			s("fim-import-module", { t("from importlib import import_module") }),
			s("fim-inspect-loader", { t("from importlib.abc import InspectLoader") }),
			s("fim-invalidate-caches", { t("from importlib import invalidate_caches") }),
			s("fim-lazy-loader", { t("from importlib.util import LazyLoader") }),
			s("fim-loader", { t("from importlib.abc import Loader") }),
			s("fim-magic-number", { t("from importlib.util import MAGIC_NUMBER") }),
			s("fim-meta-path-finder", { t("from importlib.abc import MetaPathFinder") }),
			s("fim-module-for-loader", { t("from importlib.util import module_for_loader") }),
			s("fim-module-from-spec", { t("from importlib.util import module_from_spec") }),
			s("fim-module-spec", { t("from importlib.machinery import ModuleSpec") }),
			s("fim-namespace-loader", { t("from importlib.machinery import NamespaceLoader") }),
			s("fim-optimized-bytecode-suffixes", { t("from importlib.machinery import OPTIMIZED_BYTECODE_SUFFIXES") }),
			s("fim-path-entry-finder", { t("from importlib.abc import PathEntryFinder") }),
			s("fim-path-finder", { t("from importlib.machinery import PathFinder") }),
			s("fim-reload", { t("from importlib import reload") }),
			s("fim-resolve-name", { t("from importlib.util import resolve_name") }),
			s("fim-resource-loader", { t("from importlib.abc import ResourceLoader") }),
			s("fim-set-loader", { t("from importlib.util import set_loader") }),
			s("fim-set-package", { t("from importlib.util import set_package") }),
			s("fim-source-file-loader", { t("from importlib.machinery import SourceFileLoader") }),
			s("fim-source-from-cache", { t("from importlib.util import source_from_cache") }),
			s("fim-source-hash", { t("from importlib.util import source_hash") }),
			s("fim-source-loader", { t("from importlib.abc import SourceLoader") }),
			s("fim-source-suffixes", { t("from importlib.machinery import SOURCE_SUFFIXES") }),
			s("fim-sourceless-file-loader", { t("from importlib.machinery import SourcelessFileLoader") }),
			s("fim-spec-from-file-location", { t("from importlib.util import spec_from_file_location") }),
			s("fim-spec-from-loader", { t("from importlib.util import spec_from_loader") }),

			-- standard library: itertools
			s("fit-accumulate", { t("from itertools import accumulate") }),
			s("fit-chain", { t("from itertools import chain") }),
			s("fit-combinations", { t("from itertools import combinations") }),
			s("fit-combinations-with-replacement", { t("from itertools import combinations_with_replacement") }),
			s("fit-compress", { t("from itertools import compress") }),
			s("fit-count", { t("from itertools import count") }),
			s("fit-cycle", { t("from itertools import cycle") }),
			s("fit-dropwhile", { t("from itertools import dropwhile") }),
			s("fit-filterfalse", { t("from itertools import filterfalse") }),
			s("fit-groupby", { t("from itertools import groupby") }),
			s("fit-islice", { t("from itertools import islice") }),
			s("fit-pairwise", { t("from itertools import pairwise") }),
			s("fit-permutations", { t("from itertools import permutations") }),
			s("fit-product", { t("from itertools import product") }),
			s("fit-repeat", { t("from itertools import repeat") }),
			s("fit-starmap", { t("from itertools import starmap") }),
			s("fit-takewhile", { t("from itertools import takewhile") }),
			s("fit-tee", { t("from itertools import tee") }),
			s("fit-zip-longest", { t("from itertools import zip_longest") }),

			-- standard library: pathlib
			s("fpapath", { t("from pathlib import Path") }),

			-- standard library: random
			s("fra-betavariate", { t("from random import betavariate") }),
			s("fra-binomialvariate", { t("from random import binomialvariate") }),
			s("fra-choice", { t("from random import choice") }),
			s("fra-expovariate", { t("from random import expovariate") }),
			s("fra-gammavariate", { t("from random import gammavariate") }),
			s("fra-gauss", { t("from random import gauss") }),
			s("fra-getrandbits", { t("from random import getrandbits") }),
			s("fra-getstate", { t("from random import getstate") }),
			s("fra-lognormvariate", { t("from random import lognormvariate") }),
			s("fra-normalvariate", { t("from random import normalvariate") }),
			s("fra-paretovariate", { t("from random import paretovariate") }),
			s("fra-randbytes", { t("from random import randbytes") }),
			s("fra-randint", { t("from random import randint") }),
			s("fra-random", { t("from random import random") }),
			s("fra-randrange", { t("from random import randrange") }),
			s("fra-sample", { t("from random import sample") }),
			s("fra-seed", { t("from random import seed") }),
			s("fra-setstate", { t("from random import setstate") }),
			s("fra-shuffle", { t("from random import shuffle") }),
			s("fra-system-random", { t("from random import SystemRandom") }),
			s("fra-triangular", { t("from random import triangular") }),
			s("fra-uniform", { t("from random import uniform") }),
			s("fra-vonmisesvariate", { t("from random import vonmisesvariate") }),
			s("fra-weibullvariate", { t("from random import weibullvariate") }),

			-- standard library: re
			s("fre-findall", { t("from re import findall") }),
			s("fre-search", { t("from re import search") }),

			-- standard library: typing
			s("fty-annotated", { t("from typing import Annotated") }),
			s("fty-any", { t("from typing import Any") }),
			s("fty-any-str", { t("from typing import AnyStr") }),
			s("fty-assert-never", { t("from typing import assert_never") }),
			s("fty-assert-type", { t("from typing import assert_type") }),
			s("fty-binary-io", { t("from typing import BinaryIO") }),
			s("fty-cast", { t("from typing import cast") }),
			s("fty-class-var", { t("from typing import ClassVar") }),
			s("fty-clear-overloads", { t("from typing import clear_overloads") }),
			s("fty-concatenate", { t("from typing import Concatenate") }),
			s("fty-dataclass-transform", { t("from typing import dataclass_transform") }),
			s("fty-final", { t("from typing import Final") }),
			s("fty-final", { t("from typing import final") }),
			s("fty-forward-ref", { t("from typing import ForwardRef") }),
			s("fty-generic", { t("from typing import Generic") }),
			s("fty-get-args", { t("from typing import get_args") }),
			s("fty-get-origin", { t("from typing import get_origin") }),
			s("fty-get-overloads", { t("from typing import get_overloads") }),
			s("fty-get-type-hints", { t("from typing import get_type_hints") }),
			s("fty-io", { t("from typing import IO") }),
			s("fty-is-typeddict", { t("from typing import is_typeddict") }),
			s("fty-literal", { t("from typing import Literal") }),
			s("fty-literal-string", { t("from typing import LiteralString") }),
			s("fty-named-tuple", { t("from typing import NamedTuple") }),
			s("fty-never", { t("from typing import Never") }),
			s("fty-new-type", { t("from typing import NewType") }),
			s("fty-no-return", { t("from typing import NoReturn") }),
			s("fty-no-type-check", { t("from typing import no_type_check") }),
			s("fty-not-required", { t("from typing import NotRequired") }),
			s("fty-overload", { t("from typing import overload") }),
			s("fty-override", { t("from typing import override") }),
			s("fty-param-spec", { t("from typing import ParamSpec") }),
			s("fty-param-spec-args", { t("from typing import ParamSpecArgs") }),
			s("fty-param-spec-kwargs", { t("from typing import ParamSpecKwargs") }),
			s("fty-protocol", { t("from typing import Protocol") }),
			s("fty-required", { t("from typing import Required") }),
			s("fty-reveal-type", { t("from typing import reveal_type") }),
			s("fty-runtime-checkable", { t("from typing import runtime_checkable") }),
			s("fty-self", { t("from typing import Self") }),
			s("fty-supports-abs", { t("from typing import SupportsAbs") }),
			s("fty-supports-bytes", { t("from typing import SupportsBytes") }),
			s("fty-supports-complex", { t("from typing import SupportsComplex") }),
			s("fty-supports-float", { t("from typing import SupportsFloat") }),
			s("fty-supports-index", { t("from typing import SupportsIndex") }),
			s("fty-supports-int", { t("from typing import SupportsInt") }),
			s("fty-supports-round", { t("from typing import SupportsRound") }),
			s("fty-text-io", { t("from typing import TextIO") }),
			s("fty-type-alias", { t("from typing import TypeAlias") }),
			s("fty-type-alias-type", { t("from typing import TypeAliasType") }),
			s("fty-type-checking", { t("from typing import TYPE_CHECKING") }),
			s("fty-type-guard", { t("from typing import TypeGuard") }),
			s("fty-type-var", { t("from typing import TypeVar") }),
			s("fty-type-var-tuple", { t("from typing import TypeVarTuple") }),
			s("fty-typed-dict", { t("from typing import TypedDict") }),
			s("fty-union", { t("from typing import Union") }),
			s("fty-unpack", { t("from typing import Unpack") }),

			-- standard library: zoneinfo
			s("fzozoneinfo", { t("from zoneinfo import ZoneInfo") }),

			-- third party: beartype
			s("fbebeartype", { t("from beartype import beartype") }),

			-- third party: hypothesis
			s("fhyassume", { t("from hypothesis import assume") }),
			s("fhydata", { t("from hypothesis.strategies import data") }),
			s("fhydataobject", { t("from hypothesis.strategies import DataObject") }),
			s("fhygiven", { t("from hypothesis import given") }),
			s("fhyreproduce", { t("from hypothesis import reproduce_failure") }),
			s("fhysearchstrategy", { t("from hypothesis.strategies import SearchStrategy") }),
			s("fhysettings", { t("from hypothesis import settings") }),

			-- third party: loguru
			s("flologger", { t("from loguru import logger") }),

			-- third party: numpy
			s("imnp", { t("import numpy as np") }),
			s("fnuarange", { t("from numpy import arange") }),
			s("fnuarray", { t("from numpy import array") }),
			s("fnuisfinite", { t("from numpy import isfinite") }),
			s("fnuisnan", { t("from numpy import isnan") }),
			s("fnunan", { t("from numpy import nan") }),
			s("fnundarray", { t("from numpy import ndarray") }),
			s("fnuones", { t("from numpy import ones") }),
			s("fnuoneslike", { t("from numpy import ones_like") }),
			s("fnutyndarray", { t("from numpy.typing import NDArray") }),
			s("fnuzeros", { t("from numpy import zeros") }),
			s("fnuzeroslike", { t("from numpy import zeros_like") }),

			-- third party: pandas
			s("im-pd", { t("import pandas as pd") }),
			s("fpa-assert-frame-equal", { t("from pandas.testing import assert_frame_equal") }),
			s("fpa-assert-index-equal", { t("from pandas.testing import assert_index_equal") }),
			s("fpa-assert-series-equal", { t("from pandas.testing import assert_series_equal") }),
			s("fpa-b-day", { t("from pandas.tseries.offsets import BDay") }),
			s("fpa-bdate-range", { t("from pandas import bdate_range") }),
			s("fpa-boolean-dtype", { t("from pandas import BooleanDtype") }),
			s("fpa-concat", { t("from pandas import concat") }),
			s("fpa-date-offset", { t("from pandas import DateOffset") }),
			s("fpa-date-range", { t("from pandas import date_range") }),
			s("fpa-datetime-index", { t("from pandas import DatetimeIndex") }),
			s("fpa-hour", { t("from pandas.tseries.offsets import Hour") }),
			s("fpa-index", { t("from pandas import Index") }),
			s("fpa-int64-dtype", { t("from pandas import Int64Dtype") }),
			s("fpa-micro", { t("from pandas.tseries.offsets import Micro") }),
			s("fpa-milli", { t("from pandas.tseries.offsets import Milli") }),
			s("fpa-minute", { t("from pandas.tseries.offsets import Minute") }),
			s("fpa-month-begin", { t("from pandas.tseries.offsets import MonthBegin") }),
			s("fpa-month-end", { t("from pandas.tseries.offsets import MonthEnd") }),
			s("fpa-multi-index", { t("from pandas import MultiIndex") }),
			s("fpa-na", { t("from pandas import NA") }),
			s("fpa-na-type", { t("from pandas._libs.missing import NAType") }),
			s("fpa-nano", { t("from pandas.tseries.offsets import Nano") }),
			s("fpa-option-context", { t("from pandas import option_context") }),
			s("fpa-qcut", { t("from pandas import qcut") }),
			s("fpa-range-index", { t("from pandas import RangeIndex") }),
			s("fpa-read-pickle", { t("from pandas import read_pickle") }),
			s("fpa-read-sql", { t("from pandas import read_sql") }),
			s("fpa-read-table", { t("from pandas import read_table") }),
			s("fpa-second", { t("from pandas.tseries.offsets import Second") }),
			s("fpa-set-option", { t("from pandas import set_option") }),
			s("fpa-string-dtype", { t("from pandas import StringDtype") }),
			s("fpa-timedelta", { t("from pandas import Timedelta") }),
			s("fpa-timedelta-index", { t("from pandas import TimedeltaIndex") }),
			s("fpa-timestamp", { t("from pandas import Timestamp") }),
			s("fpa-to-datetime", { t("from pandas import to_datetime") }),
			s("fpa-to-pickle", { t("from pandas import to_pickle") }),
			s("fpa-week", { t("from pandas.tseries.offsets import Week") }),

			-- third party: pprint
			s("fpp-isreadable", { t("from pprint import isreadable") }),
			s("fpp-isrecursive", { t("from pprint import isrecursive") }),
			s("fpp-pformat", { t("from pprint import pformat") }),
			s("fpp-pp", { t("from pprint import pp") }),
			s("fpp-pprint", { t("from pprint import pprint") }),
			s("fpp-pretty-printer", { t("from pprint import PrettyPrinter") }),
			s("fpp-saferepr", { t("from pprint import saferepr") }),

			-- third party: pydantic
			s("fpy-base-model", { t("from pydantic import BaseModel") }),

			-- third party: pytest
			s("fpy-fixture", { t("from pytest import fixture") }),
			s("fpy-mark", { t("from pytest import mark") }),
			s("fpy-mark-and-param", { t("from pytest import mark, param") }),
			s("fpy-param", { t("from pytest import param") }),
			s("fpy-raises", { t("from pytest import raises") }),

			-- third party: tabulate
			s("fta-tabulate", { t("from tabulate import tabulate") }),

			-- third party: (dycw-)utilities.airium
			s("fut-yield-airium", { t("from utilities.airium import yield_airium") }),

			-- third party: (dycw-)utilities.atomicwrites
			s("fut-writer", { t("from utilities.atomicwrites import writer") }),

			-- third party: (dycw-)utilities.class_name
			s("fut-get-class-name", { t("from utilities.class_name import get_class_name") }),

			-- third party: (dycw-)utilities.cryptography
			s("fut-decrypt", { t("from utilities.cryptography import decrypt") }),
			s("fut-encrypt", { t("from utilities.cryptography import encrypt") }),
			s("fut-fernet-key-missing-error", { t("from utilities.cryptography import FernetKeyMissingError") }),

			-- third party: (dycw-)utilities.datetime
			s("fut-add-weekdays", { t("from utilities.datetime import add_weekdays") }),
			s("fut-date-to-datetime", { t("from utilities.datetime import date_to_datetime") }),
			s("fut-duration-to-float", { t("from utilities.datetime import duration_to_float") }),
			s("fut-duration-to-timedelta", { t("from utilities.datetime import duration_to_timedelta") }),
			s("fut-ensure-date", { t("from utilities.datetime import ensure_date") }),
			s("fut-ensure-datetime", { t("from utilities.datetime import ensure_datetime") }),
			s("fut-ensure-time", { t("from utilities.datetime import ensure_time") }),
			s("fut-ensure-timedelta", { t("from utilities.datetime import ensure_timedelta") }),
			s("fut-epoch-utc", { t("from utilities.datetime import EPOCH_UTC") }),
			s("fut-get-now", { t("from utilities.datetime import get_now") }),
			s("fut-get-today", { t("from utilities.datetime import get_today") }),
			s("fut-is-weekday", { t("from utilities.datetime import is_weekday") }),
			s("fut-is-weekend-error", { t("from utilities.datetime import IsWeekendError") }),
			s("fut-local-time-zone-error", { t("from utilities.datetime import LocalTimeZoneError") }),
			s("fut-local-timezone", { t("from utilities.datetime import local_timezone") }),
			s("fut-maybe-sub-pct-y", { t("from utilities.datetime import maybe_sub_pct_y") }),
			s("fut-now-hkg", { t("from utilities.datetime import NOW_HKG") }),
			s("fut-now-tky", { t("from utilities.datetime import NOW_TKY") }),
			s("fut-now-utc", { t("from utilities.datetime import NOW_UTC") }),
			s("fut-parse-date", { t("from utilities.datetime import parse_date") }),
			s("fut-parse-date-error", { t("from utilities.datetime import ParseDateError") }),
			s("fut-parse-date-time-error", { t("from utilities.datetime import ParseDateTimeError") }),
			s("fut-parse-datetime", { t("from utilities.datetime import parse_datetime") }),
			s("fut-parse-time", { t("from utilities.datetime import parse_time") }),
			s("fut-parse-time-error", { t("from utilities.datetime import ParseTimeError") }),
			s("fut-parse-timedelta", { t("from utilities.datetime import parse_timedelta") }),
			s("fut-parse-timedelta-error", { t("from utilities.datetime import ParseTimedeltaError") }),
			s("fut-round-to-next-weekday", { t("from utilities.datetime import round_to_next_weekday") }),
			s("fut-round-to-prev-weekday", { t("from utilities.datetime import round_to_prev_weekday") }),
			s("fut-serialize-date", { t("from utilities.datetime import serialize_date") }),
			s("fut-serialize-datetime", { t("from utilities.datetime import serialize_datetime") }),
			s("fut-serialize-time", { t("from utilities.datetime import serialize_time") }),
			s("fut-serialize-timedelta", { t("from utilities.datetime import serialize_timedelta") }),
			s("fut-today-hkg", { t("from utilities.datetime import TODAY_HKG") }),
			s("fut-today-tky", { t("from utilities.datetime import TODAY_TKY") }),
			s("fut-today-utc", { t("from utilities.datetime import TODAY_UTC") }),
			s("fut-utc", { t("from utilities.datetime import UTC") }),
			s("fut-yield-weekdays", { t("from utilities.datetime import yield_weekdays") }),
			s("fut-yield-weekdays-error", { t("from utilities.datetime import YieldWeekdaysError") }),

			-- third party: (dycw-)utilities.getpass
			s("fut-user", { t("from utilities.getpass import USER") }),

			-- third party: (dycw-)utilities.git
			s("fut-get-branch-name", { t("from utilities.git import get_branch_name") }),
			s("fut-get-repo-name", { t("from utilities.git import get_repo_name") }),
			s("fut-get-repo-root", { t("from utilities.git import get_repo_root") }),
			s("fut-invalid-repo-error", { t("from utilities.git import InvalidRepoError") }),

			-- third party: (dycw-)utilities.itertools
			s("fut-always-iterable", { t("from utilities.itertools import always_iterable") }),
			s("fut-check-duplicates", { t("from utilities.itertools import check_duplicates") }),
			s("fut-chunked", { t("from utilities.itertools import chunked") }),
			s("fut-empty-iterable-error", { t("from utilities.itertools import EmptyIterableError") }),
			s("fut-is-iterable-not-str", { t("from utilities.itertools import is_iterable_not_str") }),
			s(
				"fut-iterable-contains-duplicates-error",
				{ t("from utilities.itertools import IterableContainsDuplicatesError") }
			),
			s("fut-multiple-elements-error", { t("from utilities.itertools import MultipleElementsError") }),
			s("fut-one", { t("from utilities.itertools import one") }),
			s("fut-take", { t("from utilities.itertools import take") }),

			-- third party: (dycw-)utilities.re
			s("fut-extract-group", { t("from utilities.re import extract_group") }),
			s("fut-extract-groups", { t("from utilities.re import extract_groups") }),
			s("fut-multiple-capture-groups-error", { t("from utilities.re import MultipleCaptureGroupsError") }),
			s("fut-multiple-matches-error", { t("from utilities.re import MultipleMatchesError") }),
			s("fut-no-capture-groups-error", { t("from utilities.re import NoCaptureGroupsError") }),
			s("fut-no-matches-error", { t("from utilities.re import NoMatchesError") }),

			-- third party: (dycw-)utilities.sentinel
			s("fut-sentinel", { t("from utilities.sentinel import sentinel") }),

			-- third party: (dycw-)utilities.tempfile
			s("fut-gettempdir", { t("from utilities.tempfile import gettempdir") }),
			s("fut-temp-dir", { t("from utilities.tempfile import TEMP_DIR") }),
			s("fut-temporary-directory", { t("from utilities.tempfile import TemporaryDirectory") }),

			-- third party: (dycw-)utilities.text
			s("fut-ensure-str", { t("from utilities.text import ensure_str") }),
			s("fut-not-a-string-error", { t("from utilities.text import NotAStringError") }),
			s("fut-snake-case", { t("from utilities.text import snake_case") }),
			s(
				"fut-snake-case-contains-duplicates-error",
				{ t("from utilities.text import SnakeCaseContainsDuplicatesError") }
			),
			s("fut-snake-case-mappings", { t("from utilities.text import snake_case_mappings") }),
			s("fut-strip-and-dedent", { t("from utilities.text import strip_and_dedent") }),

			-- third party: (dycw-)utilities.typing
			s("fut-iterable-strs", { t("from utilities.typing import IterableStrs") }),
			s("fut-number", { t("from utilities.typing import Number") }),
			s("fut-sequence-strs", { t("from utilities.typing import SequenceStrs") }),

			-- third party: xarray
			s("fxa-data-array", { t("from xarray import DataArray") }),
			s("fxa-datasetl", { t("from xarray import Dataset") }),
		})
	end,
}
