// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
// same ids are connected.
// Example:
// "Print to console": {
// 	"prefix": "log",
// 	"body": [
// 		"console.log('$1');",
// 		"$2"
// 	],
// 	"description": "Log output to console"
// }
{
  // standard library - datetime
  "im-dt": {
    "prefix": "im-dt",
    "body": ["import datetime as dt", "$0"]
  },

  // standard library - enum
  "fen-auto": {
    "prefix": "fen-auto",
    "body": ["from enum import auto", "$0"]
  },
  "fen-enum": {
    "prefix": "fen-enum",
    "body": ["from enum import Enum", "$0"]
  },

  // standard library - functools
  "ffu-cache": {
    "prefix": "ffu-cache",
    "body": ["from functools import cache", "$0"]
  },
  "ffu-cached-property": {
    "prefix": "ffu-cached-property",
    "body": ["from functools import cached_property", "$0"]
  },
  "ffu-partial": {
    "prefix": "ffu-partial",
    "body": ["from functools import partial", "$0"]
  },
  "ffu-lru-cache": {
    "prefix": "ffu-lru-cache",
    "body": ["from functools import lru_cache", "$0"]
  },

  // standard library - future
  "ffu-annotations": {
    "prefix": "ffu-annotations",
    "body": ["from __future__ import annotations", "$0"]
  },

  // standard library - pathlib
  "fpa-path": {
    "prefix": "fpa-path",
    "body": ["from pathlib import Path", "$0"]
  },

  // standard library - typing
  "fty-any": {
    "prefix": "fty-any",
    "body": ["from typing import Any", "$0"]
  },
  "fty-cast": {
    "prefix": "fty-cast",
    "body": ["from typing import cast", "$0"]
  },
  "fty-union": {
    "prefix": "fty-union",
    "body": ["from typing import Union", "$0"]
  },

  // third party - beartype
  "fbe-beartype": {
    "prefix": "fbe-beartype",
    "body": ["from beartype import beartype", "$0"]
  },

  // third party - fastapi
  "ffa-fastapi": {
    "prefix": "ffa-fastapi",
    "body": ["from fastapi import FastAPI", "$0"]
  },

  // third party - hypothesis
  "fhy-booleans": {
    "prefix": "fhy-booleans",
    "body": ["from hypothesis.strategies import booleans", "$0"]
  },
  "fhy-data": {
    "prefix": "fhy-data",
    "body": ["from hypothesis.strategies import data", "$0"]
  },
  "fhy-data-object": {
    "prefix": "fhy-data-object",
    "body": ["from hypothesis.strategies import DataObject", "$0"]
  },
  "fhy-floats": {
    "prefix": "fhy-floats",
    "body": ["from hypothesis.strategies import floats", "$0"]
  },
  "fhy-integers": {
    "prefix": "fhy-integers",
    "body": ["from hypothesis.strategies import integers", "$0"]
  },
  "fhy-lists": {
    "prefix": "fhy-lists",
    "body": ["from hypothesis.strategies import lists", "$0"]
  },
  "fhy-reproduce-failure": {
    "prefix": "fhy-reproduce-failure",
    "body": ["from hypothesis import reproduce_failure", "$0"]
  },
  "fhy-sampled-from": {
    "prefix": "fhy-sampled-from",
    "body": ["from hypothesis.strategies import sampled_from", "$0"]
  },
  "fhy-sets": {
    "prefix": "fhy-sets",
    "body": ["from hypothesis.strategies import sets", "$0"]
  },

  // third party - loguru
  "flo-logger": {
    "prefix": "flo-logger",
    "body": ["from loguru import logger", "$0"]
  },

  // third party - pandas
  "fpa-assert-frame-equal": {
    "prefix": "fpa-assert-frame-equal",
    "body": ["from pandas.testing import assert_frame_equal ", "$0"]
  },
  "fpa-assert-index-equal": {
    "prefix": "fpa-assert-index-equal",
    "body": ["from pandas.testing import assert_index_equal ", "$0"]
  },
  "fpa-assert-series-equal": {
    "prefix": "fpa-assert-series-equal",
    "body": ["from pandas.testing import assert_series_equal ", "$0"]
  },
  "fpa-bday": {
    "prefix": "fpa-bday",
    "body": ["from pandas.tseries.offsets import BDay", "$0"]
  },
  "fpa-dataframe": {
    "prefix": "fpa-dataframe",
    "body": ["from pandas import DataFrame", "$0"]
  },
  "fpa-series": {
    "prefix": "fpa-series",
    "body": ["from pandas import Series", "$0"]
  },
  "fpa-timedelta": {
    "prefix": "fpa-timedelta",
    "body": ["from pandas import Timedelta", "$0"]
  },
  "fpa-timestamp": {
    "prefix": "fpa-timestamp",
    "body": ["from pandas import Timestamp", "$0"]
  },

  // third party - polars
  "fpo-boolean": {
    "prefix": "fpo-boolean",
    "body": ["from polars import Boolean", "$0"]
  },
  "fpo-col": {
    "prefix": "fpo-col",
    "body": ["from polars import col", "$0"]
  },
  "fpo-dataframe": {
    "prefix": "fpo-dataframe",
    "body": ["from polars import DataFrame", "$0"]
  },
  "fpo-date": {
    "prefix": "fpo-date",
    "body": ["from polars import Date", "$0"]
  },
  "fpo-datetime": {
    "prefix": "fpo-datetime",
    "body": ["from polars import Datetime", "$0"]
  },
  "fpo-float64": {
    "prefix": "fpo-float64",
    "body": ["from polars import Float64", "$0"]
  },
  "fpo-int64": {
    "prefix": "fpo-int64",
    "body": ["from polars import Int64", "$0"]
  },
  "fpo-read-csv": {
    "prefix": "fpo-read-csv",
    "body": ["from polars import read_csv", "$0"]
  },
  "fpo-read-excel": {
    "prefix": "fpo-read-excel",
    "body": ["from polars import read_excel", "$0"]
  },
  "fpo-series": {
    "prefix": "fpo-series",
    "body": ["from polars import Series", "$0"]
  },
  "fpo-utf8": {
    "prefix": "fpo-utf8",
    "body": ["from polars import Utf8", "$0"]
  },
  "fpo-when": {
    "prefix": "fpo-when",
    "body": ["from polars import when", "$0"]
  },

  // third party - pytest
  "fpy-fixture": {
    "prefix": "fpy-fixture",
    "body": ["from pytest import fixture", "$0"]
  },
  "fpy-mark": {
    "prefix": "fpy-mark",
    "body": ["from pytest import mark", "$0"]
  },
  "fpy-param": {
    "prefix": "fpy-param",
    "body": ["from pytest import param", "$0"]
  },
  "fpy-raises": {
    "prefix": "fpy-raises",
    "body": ["from pytest import raises", "$0"]
  },

  // third party - sqlalchemy
  "fsq-and": {
    "prefix": "fsq-and",
    "body": ["from sqlalchemy import and_", "$0"]
  },
  "fsq-column": {
    "prefix": "fsq-column",
    "body": ["from sqlalchemy import Column", "$0"]
  },
  "fsq-date": {
    "prefix": "fsq-date",
    "body": ["from sqlalchemy import Date", "$0"]
  },
  "fsq-engine": {
    "prefix": "fsq-engine",
    "body": ["from sqlalchemy.engine import Engine", "$0"]
  },
  "fsq-func": {
    "prefix": "fsq-func",
    "body": ["from sqlalchemy import func", "$0"]
  },
  "fsq-or": {
    "prefix": "fsq-or",
    "body": ["from sqlalchemy import or_", "$0"]
  },
  "fsq-table": {
    "prefix": "fsq-table",
    "body": ["from sqlalchemy import Table", "$0"]
  }
}
