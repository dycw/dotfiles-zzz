// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
// same ids are connected.
// Example:
// "Print to console": {
// 	"prefix": "log",
// 	"body": [
// 		"console.log('$1');",
// 		"$2"
// 	],
// 	"description": "Log output to console"
// }
{
  // standard library: abc
  "fab-abc": {
    "prefix": "fab-abc",
    "body": ["from abc import ABC", "$0"]
  },
  "fab-abc-meta": {
    "prefix": "fab-abc-meta",
    "body": ["from abc import ABCMeta", "$0"]
  },
  "fab-abstractclassmethod": {
    "prefix": "fab-abstractclassmethod",
    "body": ["from abc import abstractclassmethod", "$0"]
  },
  "fab-abstractmethod": {
    "prefix": "fab-abstractmethod",
    "body": ["from abc import abstractmethod", "$0"]
  },
  "fab-abstractproperty": {
    "prefix": "fab-abstractproperty",
    "body": ["from abc import abstractproperty", "$0"]
  },
  "fab-abstractstaticmethod": {
    "prefix": "fab-abstractstaticmethod",
    "body": ["from abc import abstractstaticmethod", "$0"]
  },
  "fab-get-cache-token": {
    "prefix": "fab-get-cache-token",
    "body": ["from abc import get_cache_token", "$0"]
  },
  "fab-update-abstractmethods": {
    "prefix": "fab-update-abstractmethods",
    "body": ["from abc import update_abstractmethods", "$0"]
  },

  // standard library: argparse
  "far-argument-parser": {
    "prefix": "far-argument-parser",
    "body": ["from argparse import ArgumentParser", "$0"]
  },

  // standard library: collections
  "fco-async-generator": {
    "prefix": "fco-async-generator",
    "body": ["from collections.abc import AsyncGenerator", "$0"]
  },
  "fco-async-iterable": {
    "prefix": "fco-async-iterable",
    "body": ["from collections.abc import AsyncIterable", "$0"]
  },
  "fco-async-iterator": {
    "prefix": "fco-async-iterator",
    "body": ["from collections.abc import AsyncIterator", "$0"]
  },
  "fco-awaitable": {
    "prefix": "fco-awaitable",
    "body": ["from collections.abc import Awaitable", "$0"]
  },
  "fco-buffer": {
    "prefix": "fco-buffer",
    "body": ["from collections.abc import Buffer", "$0"]
  },
  "fco-callable": {
    "prefix": "fco-callable",
    "body": ["from collections.abc import Callable", "$0"]
  },
  "fco-chain-map": {
    "prefix": "fco-chain-map",
    "body": ["from collections import ChainMap", "$0"]
  },
  "fco-collection": {
    "prefix": "fco-collection",
    "body": ["from collections.abc import Collection", "$0"]
  },
  "fco-container": {
    "prefix": "fco-container",
    "body": ["from collections.abc import Container", "$0"]
  },
  "fco-coroutine": {
    "prefix": "fco-coroutine",
    "body": ["from collections.abc import Coroutine", "$0"]
  },
  "fco-counter": {
    "prefix": "fco-counter",
    "body": ["from collections import Counter", "$0"]
  },
  "fco-defaultdict": {
    "prefix": "fco-defaultdict",
    "body": ["from collections import defaultdict", "$0"]
  },
  "fco-deque": {
    "prefix": "fco-deque",
    "body": ["from collections import deque", "$0"]
  },
  "fco-generator": {
    "prefix": "fco-generator",
    "body": ["from collections.abc import Generator", "$0"]
  },
  "fco-hashable": {
    "prefix": "fco-hashable",
    "body": ["from collections.abc import Hashable", "$0"]
  },
  "fco-items-view": {
    "prefix": "fco-items-view",
    "body": ["from collections.abc import ItemsView", "$0"]
  },
  "fco-iterable": {
    "prefix": "fco-iterable",
    "body": ["from collections.abc import Iterable", "$0"]
  },
  "fco-iterator": {
    "prefix": "fco-iterator",
    "body": ["from collections.abc import Iterator", "$0"]
  },
  "fco-keys-view": {
    "prefix": "fco-keys-view",
    "body": ["from collections.abc import KeysView", "$0"]
  },
  "fco-mapping": {
    "prefix": "fco-mapping",
    "body": ["from collections.abc import Mapping", "$0"]
  },
  "fco-mapping-view": {
    "prefix": "fco-mapping-view",
    "body": ["from collections.abc import MappingView", "$0"]
  },
  "fco-mutable-mapping": {
    "prefix": "fco-mutable-mapping",
    "body": ["from collections.abc import MutableMapping", "$0"]
  },
  "fco-mutable-sequence": {
    "prefix": "fco-mutable-sequence",
    "body": ["from collections.abc import MutableSequence", "$0"]
  },
  "fco-mutable-set": {
    "prefix": "fco-mutable-set",
    "body": ["from collections.abc import MutableSet", "$0"]
  },
  "fco-namedtuple": {
    "prefix": "fco-namedtuple",
    "body": ["from collections import namedtuple", "$0"]
  },
  "fco-ordered-dict": {
    "prefix": "fco-ordered-dict",
    "body": ["from collections import OrderedDict", "$0"]
  },
  "fco-reversible": {
    "prefix": "fco-reversible",
    "body": ["from collections.abc import Reversible", "$0"]
  },
  "fco-sequence": {
    "prefix": "fco-sequence",
    "body": ["from collections.abc import Sequence", "$0"]
  },
  "fco-set": {
    "prefix": "fco-set",
    "body": ["from collections.abc import Set as AbstractSet", "$0"]
  },
  "fco-sized": {
    "prefix": "fco-sized",
    "body": ["from collections.abc import Sized", "$0"]
  },
  "fco-user-dict": {
    "prefix": "fco-user-dict",
    "body": ["from collections import UserDict", "$0"]
  },
  "fco-user-list": {
    "prefix": "fco-user-list",
    "body": ["from collections import UserList", "$0"]
  },
  "fco-user-string": {
    "prefix": "fco-user-string",
    "body": ["from collections import UserString", "$0"]
  },
  "fco-values-view": {
    "prefix": "fco-values-view",
    "body": ["from collections.abc import ValuesView", "$0"]
  },

  // standard library: contextlib
  "fco-abstract-async-context-manager": {
    "prefix": "fco-abstract-async-context-manager",
    "body": ["from contextlib import AbstractAsyncContextManager", "$0"]
  },
  "fco-abstract-context-manager": {
    "prefix": "fco-abstract-context-manager",
    "body": ["from contextlib import AbstractContextManager", "$0"]
  },
  "fco-aclosing": {
    "prefix": "fco-aclosing",
    "body": ["from contextlib import aclosing", "$0"]
  },
  "fco-async-context-decorator": {
    "prefix": "fco-async-context-decorator",
    "body": ["from contextlib import AsyncContextDecorator", "$0"]
  },
  "fco-async-exit-stack": {
    "prefix": "fco-async-exit-stack",
    "body": ["from contextlib import AsyncExitStack", "$0"]
  },
  "fco-asynccontextmanager": {
    "prefix": "fco-asynccontextmanager",
    "body": ["from contextlib import asynccontextmanager", "$0"]
  },
  "fco-chdir": {
    "prefix": "fco-chdir",
    "body": ["from contextlib import chdir", "$0"]
  },
  "fco-closing": {
    "prefix": "fco-closing",
    "body": ["from contextlib import closing", "$0"]
  },
  "fco-context-decorator": {
    "prefix": "fco-context-decorator",
    "body": ["from contextlib import ContextDecorator", "$0"]
  },
  "fco-contextmanager": {
    "prefix": "fco-contextmanager",
    "body": ["from contextlib import contextmanager", "$0"]
  },
  "fco-exit-stack": {
    "prefix": "fco-exit-stack",
    "body": ["from contextlib import ExitStack", "$0"]
  },
  "fco-nullcontext": {
    "prefix": "fco-nullcontext",
    "body": ["from contextlib import nullcontext", "$0"]
  },
  "fco-redirect-stderr": {
    "prefix": "fco-redirect-stderr",
    "body": ["from contextlib import redirect_stderr", "$0"]
  },
  "fco-redirect-stdout": {
    "prefix": "fco-redirect-stdout",
    "body": ["from contextlib import redirect_stdout", "$0"]
  },
  "fco-suppress": {
    "prefix": "fco-suppress",
    "body": ["from contextlib import suppress", "$0"]
  },

  // standard library: csv
  "fcs-dialect": {
    "prefix": "fcs-dialect",
    "body": ["from csv import Dialect", "$0"]
  },
  "fcs-dict-reader": {
    "prefix": "fcs-dict-reader",
    "body": ["from csv import DictReader", "$0"]
  },
  "fcs-dict-writer": {
    "prefix": "fcs-dict-writer",
    "body": ["from csv import DictWriter", "$0"]
  },
  "fcs-excel": {
    "prefix": "fcs-excel",
    "body": ["from csv import excel", "$0"]
  },
  "fcs-excel-tab": {
    "prefix": "fcs-excel-tab",
    "body": ["from csv import excel_tab", "$0"]
  },
  "fcs-field-size-limit": {
    "prefix": "fcs-field-size-limit",
    "body": ["from csv import field_size_limit", "$0"]
  },
  "fcs-list-dialects": {
    "prefix": "fcs-list-dialects",
    "body": ["from csv import list_dialects", "$0"]
  },
  "fcs-quote-all": {
    "prefix": "fcs-quote-all",
    "body": ["from csv import QUOTE_ALL", "$0"]
  },
  "fcs-quote-minimal": {
    "prefix": "fcs-quote-minimal",
    "body": ["from csv import QUOTE_MINIMAL", "$0"]
  },
  "fcs-quote-none": {
    "prefix": "fcs-quote-none",
    "body": ["from csv import QUOTE_NONE", "$0"]
  },
  "fcs-quote-nonnumeric": {
    "prefix": "fcs-quote-nonnumeric",
    "body": ["from csv import QUOTE_NONNUMERIC", "$0"]
  },
  "fcs-reader": {
    "prefix": "fcs-reader",
    "body": ["from csv import reader", "$0"]
  },
  "fcs-register-dialect": {
    "prefix": "fcs-register-dialect",
    "body": ["from csv import register_dialect", "$0"]
  },
  "fcs-sniffer": {
    "prefix": "fcs-sniffer",
    "body": ["from csv import Sniffer", "$0"]
  },
  "fcs-unix-dialect": {
    "prefix": "fcs-unix-dialect",
    "body": ["from csv import unix_dialect", "$0"]
  },
  "fcs-unregister-dialect": {
    "prefix": "fcs-unregister-dialect",
    "body": ["from csv import unregister_dialect", "$0"]
  },
  "fcs-writer": {
    "prefix": "fcs-writer",
    "body": ["from csv import writer", "$0"]
  },

  // standard library: dataclasses
  "fda-asdict": {
    "prefix": "fda-asdict",
    "body": ["from dataclasses import asdict", "$0"]
  },
  "fda-astuple": {
    "prefix": "fda-astuple",
    "body": ["from dataclasses import astuple", "$0"]
  },
  "fda-dataclass": {
    "prefix": "fda-dataclass",
    "body": ["from dataclasses import dataclass", "$0"]
  },
  "fda-field": {
    "prefix": "fda-field",
    "body": ["from dataclasses import field", "$0"]
  },
  "fda-fields": {
    "prefix": "fda-fields",
    "body": ["from dataclasses import fields", "$0"]
  },
  "fda-frozen-instance-error": {
    "prefix": "fda-frozen-instance-error",
    "body": ["from dataclasses import FrozenInstanceError", "$0"]
  },
  "fda-is-dataclass": {
    "prefix": "fda-is-dataclass",
    "body": ["from dataclasses import is_dataclass", "$0"]
  },
  "fda-kw-only": {
    "prefix": "fda-kw-only",
    "body": ["from dataclasses import KW_ONLY", "$0"]
  },
  "fda-make-dataclass": {
    "prefix": "fda-make-dataclass",
    "body": ["from dataclasses import make_dataclass", "$0"]
  },
  "fda-missing": {
    "prefix": "fda-missing",
    "body": ["from dataclasses import MISSING", "$0"]
  },
  "fda-replace": {
    "prefix": "fda-replace",
    "body": ["from dataclasses import replace", "$0"]
  },

  // standard library: datetime
  "im-dt": {
    "prefix": "im-dt",
    "body": ["import datetime as dt", "$0"]
  },

  // standard library: enum
  "fen-auto": { "prefix": "fen-auto", "body": ["from enum import auto", "$0"] },
  "fen-enum": { "prefix": "fen-enum", "body": ["from enum import Enum", "$0"] },
  "fen-enum-check": {
    "prefix": "fen-enum-check",
    "body": ["from enum import EnumCheck", "$0"]
  },
  "fen-enum-meta": {
    "prefix": "fen-enum-meta",
    "body": ["from enum import EnumMeta", "$0"]
  },
  "fen-flag": { "prefix": "fen-flag", "body": ["from enum import Flag", "$0"] },
  "fen-flag-boundary": {
    "prefix": "fen-flag-boundary",
    "body": ["from enum import FlagBoundary", "$0"]
  },
  "fen-global-enum": {
    "prefix": "fen-global-enum",
    "body": ["from enum import global_enum", "$0"]
  },
  "fen-int-enum": {
    "prefix": "fen-int-enum",
    "body": ["from enum import IntEnum", "$0"]
  },
  "fen-int-flag": {
    "prefix": "fen-int-flag",
    "body": ["from enum import IntFlag", "$0"]
  },
  "fen-member": {
    "prefix": "fen-member",
    "body": ["from enum import member", "$0"]
  },
  "fen-nonmember": {
    "prefix": "fen-nonmember",
    "body": ["from enum import nonmember", "$0"]
  },
  "fen-property": {
    "prefix": "fen-property",
    "body": ["from enum import property", "$0"]
  },
  "fen-repr-enum": {
    "prefix": "fen-repr-enum",
    "body": ["from enum import ReprEnum", "$0"]
  },
  "fen-show-flag-values": {
    "prefix": "fen-show-flag-values",
    "body": ["from enum import show_flag_values", "$0"]
  },
  "fen-str-enum": {
    "prefix": "fen-str-enum",
    "body": ["from enum import StrEnum", "$0"]
  },
  "fen-unique": {
    "prefix": "fen-unique",
    "body": ["from enum import unique", "$0"]
  },
  "fen-verify": {
    "prefix": "fen-verify",
    "body": ["from enum import verify", "$0"]
  },

  // standard library: functools
  "ffu-cache": {
    "prefix": "ffu-cache",
    "body": ["from functools import cache", "$0"]
  },
  "ffu-cached-property": {
    "prefix": "ffu-cached-property",
    "body": ["from functools import cached_property", "$0"]
  },
  "ffu-cmp-to-key": {
    "prefix": "ffu-cmp-to-key",
    "body": ["from functools import cmp_to_key", "$0"]
  },
  "ffu-lru-cache": {
    "prefix": "ffu-lru-cache",
    "body": ["from functools import lru_cache", "$0"]
  },
  "ffu-partial": {
    "prefix": "ffu-partial",
    "body": ["from functools import partial", "$0"]
  },
  "ffu-partialmethod": {
    "prefix": "ffu-partialmethod",
    "body": ["from functools import partialmethod", "$0"]
  },
  "ffu-reduce": {
    "prefix": "ffu-reduce",
    "body": ["from functools import reduce", "$0"]
  },
  "ffu-singledispatch": {
    "prefix": "ffu-singledispatch",
    "body": ["from functools import singledispatch", "$0"]
  },
  "ffu-singledispatchmethod": {
    "prefix": "ffu-singledispatchmethod",
    "body": ["from functools import singledispatchmethod", "$0"]
  },
  "ffu-total-ordering": {
    "prefix": "ffu-total-ordering",
    "body": ["from functools import total_ordering", "$0"]
  },
  "ffu-update-wrapper": {
    "prefix": "ffu-update-wrapper",
    "body": ["from functools import update_wrapper", "$0"]
  },
  "ffu-wraps": {
    "prefix": "ffu-wraps",
    "body": ["from functools import wraps", "$0"]
  },

  // standard library: future
  "ffu-annotations": {
    "prefix": "ffu-annotations",
    "body": ["from __future__ import annotations", "$0"]
  },

  // standard library: gzip
  "fgz-bad-gzip-file": {
    "prefix": "fgz-bad-gzip-file",
    "body": ["from gzip import BadGzipFile", "$0"]
  },
  "fgz-compress": {
    "prefix": "fgz-compress",
    "body": ["from gzip import compress", "$0"]
  },
  "fgz-decompress": {
    "prefix": "fgz-decompress",
    "body": ["from gzip import decompress", "$0"]
  },
  "fgz-gzip-file": {
    "prefix": "fgz-gzip-file",
    "body": ["from gzip import GzipFile", "$0"]
  },

  // standard library: hashlib
  "fha-algorithms-available": {
    "prefix": "fha-algorithms-available",
    "body": ["from hashlib import algorithms_available", "$0"]
  },
  "fha-algorithms-guaranteed": {
    "prefix": "fha-algorithms-guaranteed",
    "body": ["from hashlib import algorithms_guaranteed", "$0"]
  },
  "fha-blake2b": {
    "prefix": "fha-blake2b",
    "body": ["from hashlib import blake2b", "$0"]
  },
  "fha-blake2s": {
    "prefix": "fha-blake2s",
    "body": ["from hashlib import blake2s", "$0"]
  },
  "fha-file-digest": {
    "prefix": "fha-file-digest",
    "body": ["from hashlib import file_digest", "$0"]
  },
  "fha-md5": { "prefix": "fha-md5", "body": ["from hashlib import md5", "$0"] },
  "fha-new": { "prefix": "fha-new", "body": ["from hashlib import new", "$0"] },
  "fha-pbkdf2-hmac": {
    "prefix": "fha-pbkdf2-hmac",
    "body": ["from hashlib import pbkdf2_hmac", "$0"]
  },
  "fha-scrypt": {
    "prefix": "fha-scrypt",
    "body": ["from hashlib import scrypt", "$0"]
  },
  "fha-sha1": {
    "prefix": "fha-sha1",
    "body": ["from hashlib import sha1", "$0"]
  },
  "fha-sha224": {
    "prefix": "fha-sha224",
    "body": ["from hashlib import sha224", "$0"]
  },
  "fha-sha256": {
    "prefix": "fha-sha256",
    "body": ["from hashlib import sha256", "$0"]
  },
  "fha-sha3-224": {
    "prefix": "fha-sha3-224",
    "body": ["from hashlib import sha3_224", "$0"]
  },
  "fha-sha3-256": {
    "prefix": "fha-sha3-256",
    "body": ["from hashlib import sha3_256", "$0"]
  },
  "fha-sha3-384": {
    "prefix": "fha-sha3-384",
    "body": ["from hashlib import sha3_384", "$0"]
  },
  "fha-sha3-512": {
    "prefix": "fha-sha3-512",
    "body": ["from hashlib import sha3_512", "$0"]
  },
  "fha-sha384": {
    "prefix": "fha-sha384",
    "body": ["from hashlib import sha384", "$0"]
  },
  "fha-sha512": {
    "prefix": "fha-sha512",
    "body": ["from hashlib import sha512", "$0"]
  },
  "fha-shake-128": {
    "prefix": "fha-shake-128",
    "body": ["from hashlib import shake_128", "$0"]
  },
  "fha-shake-256": {
    "prefix": "fha-shake-256",
    "body": ["from hashlib import shake_256", "$0"]
  },

  // standard library: importlib
  "fim-all-suffixes": {
    "prefix": "fim-all-suffixes",
    "body": ["from importlib.machinery import all_suffixes", "$0"]
  },
  "fim-builtin-importer": {
    "prefix": "fim-builtin-importer",
    "body": ["from importlib.machinery import BuiltinImporter", "$0"]
  },
  "fim-bytecode-suffixes": {
    "prefix": "fim-bytecode-suffixes",
    "body": ["from importlib.machinery import BYTECODE_SUFFIXES", "$0"]
  },
  "fim-cache-from-source": {
    "prefix": "fim-cache-from-source",
    "body": ["from importlib.util import cache_from_source", "$0"]
  },
  "fim-debug-bytecode-suffixes": {
    "prefix": "fim-debug-bytecode-suffixes",
    "body": ["from importlib.machinery import DEBUG_BYTECODE_SUFFIXES", "$0"]
  },
  "fim-decode-source": {
    "prefix": "fim-decode-source",
    "body": ["from importlib.util import decode_source", "$0"]
  },
  "fim-execution-loader": {
    "prefix": "fim-execution-loader",
    "body": ["from importlib.abc import ExecutionLoader", "$0"]
  },
  "fim-extension-file-loader": {
    "prefix": "fim-extension-file-loader",
    "body": ["from importlib.machinery import ExtensionFileLoader", "$0"]
  },
  "fim-extension-suffixes": {
    "prefix": "fim-extension-suffixes",
    "body": ["from importlib.machinery import EXTENSION_SUFFIXES", "$0"]
  },
  "fim-file-finder": {
    "prefix": "fim-file-finder",
    "body": ["from importlib.machinery import FileFinder", "$0"]
  },
  "fim-file-loader": {
    "prefix": "fim-file-loader",
    "body": ["from importlib.abc import FileLoader", "$0"]
  },
  "fim-find-loader": {
    "prefix": "fim-find-loader",
    "body": ["from importlib import find_loader", "$0"]
  },
  "fim-find-spec": {
    "prefix": "fim-find-spec",
    "body": ["from importlib.util import find_spec", "$0"]
  },
  "fim-frozen-importer": {
    "prefix": "fim-frozen-importer",
    "body": ["from importlib.machinery import FrozenImporter", "$0"]
  },
  "fim-import-module": {
    "prefix": "fim-import-module",
    "body": ["from importlib import import_module", "$0"]
  },
  "fim-inspect-loader": {
    "prefix": "fim-inspect-loader",
    "body": ["from importlib.abc import InspectLoader", "$0"]
  },
  "fim-invalidate-caches": {
    "prefix": "fim-invalidate-caches",
    "body": ["from importlib import invalidate_caches", "$0"]
  },
  "fim-lazy-loader": {
    "prefix": "fim-lazy-loader",
    "body": ["from importlib.util import LazyLoader", "$0"]
  },
  "fim-loader": {
    "prefix": "fim-loader",
    "body": ["from importlib.abc import Loader", "$0"]
  },
  "fim-magic-number": {
    "prefix": "fim-magic-number",
    "body": ["from importlib.util import MAGIC_NUMBER", "$0"]
  },
  "fim-meta-path-finder": {
    "prefix": "fim-meta-path-finder",
    "body": ["from importlib.abc import MetaPathFinder", "$0"]
  },
  "fim-module-for-loader": {
    "prefix": "fim-module-for-loader",
    "body": ["from importlib.util import module_for_loader", "$0"]
  },
  "fim-module-from-spec": {
    "prefix": "fim-module-from-spec",
    "body": ["from importlib.util import module_from_spec", "$0"]
  },
  "fim-module-spec": {
    "prefix": "fim-module-spec",
    "body": ["from importlib.machinery import ModuleSpec", "$0"]
  },
  "fim-namespace-loader": {
    "prefix": "fim-namespace-loader",
    "body": ["from importlib.machinery import NamespaceLoader", "$0"]
  },
  "fim-optimized-bytecode-suffixes": {
    "prefix": "fim-optimized-bytecode-suffixes",
    "body": [
      "from importlib.machinery import OPTIMIZED_BYTECODE_SUFFIXES",
      "$0"
    ]
  },
  "fim-path-entry-finder": {
    "prefix": "fim-path-entry-finder",
    "body": ["from importlib.abc import PathEntryFinder", "$0"]
  },
  "fim-path-finder": {
    "prefix": "fim-path-finder",
    "body": ["from importlib.machinery import PathFinder", "$0"]
  },
  "fim-reload": {
    "prefix": "fim-reload",
    "body": ["from importlib import reload", "$0"]
  },
  "fim-resolve-name": {
    "prefix": "fim-resolve-name",
    "body": ["from importlib.util import resolve_name", "$0"]
  },
  "fim-resource-loader": {
    "prefix": "fim-resource-loader",
    "body": ["from importlib.abc import ResourceLoader", "$0"]
  },
  "fim-set-loader": {
    "prefix": "fim-set-loader",
    "body": ["from importlib.util import set_loader", "$0"]
  },
  "fim-set-package": {
    "prefix": "fim-set-package",
    "body": ["from importlib.util import set_package", "$0"]
  },
  "fim-source-file-loader": {
    "prefix": "fim-source-file-loader",
    "body": ["from importlib.machinery import SourceFileLoader", "$0"]
  },
  "fim-source-from-cache": {
    "prefix": "fim-source-from-cache",
    "body": ["from importlib.util import source_from_cache", "$0"]
  },
  "fim-source-hash": {
    "prefix": "fim-source-hash",
    "body": ["from importlib.util import source_hash", "$0"]
  },
  "fim-source-loader": {
    "prefix": "fim-source-loader",
    "body": ["from importlib.abc import SourceLoader", "$0"]
  },
  "fim-source-suffixes": {
    "prefix": "fim-source-suffixes",
    "body": ["from importlib.machinery import SOURCE_SUFFIXES", "$0"]
  },
  "fim-sourceless-file-loader": {
    "prefix": "fim-sourceless-file-loader",
    "body": ["from importlib.machinery import SourcelessFileLoader", "$0"]
  },
  "fim-spec-from-file-location": {
    "prefix": "fim-spec-from-file-location",
    "body": ["from importlib.util import spec_from_file_location", "$0"]
  },
  "fim-spec-from-loader": {
    "prefix": "fim-spec-from-loader",
    "body": ["from importlib.util import spec_from_loader", "$0"]
  },

  // standard library: itertools
  "fit-accumulate": {
    "prefix": "fit-accumulate",
    "body": ["from itertools import accumulate", "$0"]
  },
  "fit-chain": {
    "prefix": "fit-chain",
    "body": ["from itertools import chain", "$0"]
  },
  "fit-combinations": {
    "prefix": "fit-combinations",
    "body": ["from itertools import combinations", "$0"]
  },
  "fit-combinations-with-replacement": {
    "prefix": "fit-combinations-with-replacement",
    "body": ["from itertools import combinations_with_replacement", "$0"]
  },
  "fit-compress": {
    "prefix": "fit-compress",
    "body": ["from itertools import compress", "$0"]
  },
  "fit-count": {
    "prefix": "fit-count",
    "body": ["from itertools import count", "$0"]
  },
  "fit-cycle": {
    "prefix": "fit-cycle",
    "body": ["from itertools import cycle", "$0"]
  },
  "fit-dropwhile": {
    "prefix": "fit-dropwhile",
    "body": ["from itertools import dropwhile", "$0"]
  },
  "fit-filterfalse": {
    "prefix": "fit-filterfalse",
    "body": ["from itertools import filterfalse", "$0"]
  },
  "fit-groupby": {
    "prefix": "fit-groupby",
    "body": ["from itertools import groupby", "$0"]
  },
  "fit-islice": {
    "prefix": "fit-islice",
    "body": ["from itertools import islice", "$0"]
  },
  "fit-pairwise": {
    "prefix": "fit-pairwise",
    "body": ["from itertools import pairwise", "$0"]
  },
  "fit-permutations": {
    "prefix": "fit-permutations",
    "body": ["from itertools import permutations", "$0"]
  },
  "fit-product": {
    "prefix": "fit-product",
    "body": ["from itertools import product", "$0"]
  },
  "fit-repeat": {
    "prefix": "fit-repeat",
    "body": ["from itertools import repeat", "$0"]
  },
  "fit-starmap": {
    "prefix": "fit-starmap",
    "body": ["from itertools import starmap", "$0"]
  },
  "fit-takewhile": {
    "prefix": "fit-takewhile",
    "body": ["from itertools import takewhile", "$0"]
  },
  "fit-tee": {
    "prefix": "fit-tee",
    "body": ["from itertools import tee", "$0"]
  },
  "fit-zip-longest": {
    "prefix": "fit-zip-longest",
    "body": ["from itertools import zip_longest", "$0"]
  },

  // standard library: operator
  "fop-eq": {
    "prefix": "fop-eq",
    "body": ["from operator import eq", "$0"]
  },

  // standard library: pathlib
  "fpa-path": {
    "prefix": "fpa-path",
    "body": ["from pathlib import Path", "$0"]
  },

  // standard library: random
  "fra-betavariate": {
    "prefix": "fra-betavariate",
    "body": ["from random import betavariate", "$0"]
  },
  "fra-binomialvariate": {
    "prefix": "fra-binomialvariate",
    "body": ["from random import binomialvariate", "$0"]
  },
  "fra-choice": {
    "prefix": "fra-choice",
    "body": ["from random import choice", "$0"]
  },
  "fra-expovariate": {
    "prefix": "fra-expovariate",
    "body": ["from random import expovariate", "$0"]
  },
  "fra-gammavariate": {
    "prefix": "fra-gammavariate",
    "body": ["from random import gammavariate", "$0"]
  },
  "fra-gauss": {
    "prefix": "fra-gauss",
    "body": ["from random import gauss", "$0"]
  },
  "fra-getrandbits": {
    "prefix": "fra-getrandbits",
    "body": ["from random import getrandbits", "$0"]
  },
  "fra-getstate": {
    "prefix": "fra-getstate",
    "body": ["from random import getstate", "$0"]
  },
  "fra-lognormvariate": {
    "prefix": "fra-lognormvariate",
    "body": ["from random import lognormvariate", "$0"]
  },
  "fra-normalvariate": {
    "prefix": "fra-normalvariate",
    "body": ["from random import normalvariate", "$0"]
  },
  "fra-paretovariate": {
    "prefix": "fra-paretovariate",
    "body": ["from random import paretovariate", "$0"]
  },
  "fra-randbytes": {
    "prefix": "fra-randbytes",
    "body": ["from random import randbytes", "$0"]
  },
  "fra-randint": {
    "prefix": "fra-randint",
    "body": ["from random import randint", "$0"]
  },
  "fra-random": {
    "prefix": "fra-random",
    "body": ["from random import random", "$0"]
  },
  "fra-randrange": {
    "prefix": "fra-randrange",
    "body": ["from random import randrange", "$0"]
  },
  "fra-sample": {
    "prefix": "fra-sample",
    "body": ["from random import sample", "$0"]
  },
  "fra-seed": {
    "prefix": "fra-seed",
    "body": ["from random import seed", "$0"]
  },
  "fra-setstate": {
    "prefix": "fra-setstate",
    "body": ["from random import setstate", "$0"]
  },
  "fra-shuffle": {
    "prefix": "fra-shuffle",
    "body": ["from random import shuffle", "$0"]
  },
  "fra-system-random": {
    "prefix": "fra-system-random",
    "body": ["from random import SystemRandom", "$0"]
  },
  "fra-triangular": {
    "prefix": "fra-triangular",
    "body": ["from random import triangular", "$0"]
  },
  "fra-uniform": {
    "prefix": "fra-uniform",
    "body": ["from random import uniform", "$0"]
  },
  "fra-vonmisesvariate": {
    "prefix": "fra-vonmisesvariate",
    "body": ["from random import vonmisesvariate", "$0"]
  },
  "fra-weibullvariate": {
    "prefix": "fra-weibullvariate",
    "body": ["from random import weibullvariate", "$0"]
  },

  // standard library: re
  "fre-dotall": {
    "prefix": "fre-dotall",
    "body": ["from re import DOTALL", "$0"]
  },
  "fre-escape": {
    "prefix": "fre-escape",
    "body": ["from re import escape", "$0"]
  },
  "fre-findall": {
    "prefix": "fre-findall",
    "body": ["from re import findall", "$0"]
  },
  "fre-fullmatch": {
    "prefix": "fre-fullmatch",
    "body": ["from re import fullmatch", "$0"]
  },
  "fre-match": {
    "prefix": "fre-match",
    "body": ["from re import match", "$0"]
  },
  "fre-search": {
    "prefix": "fre-search",
    "body": ["from re import search", "$0"]
  },

  // standard library: shutil
  "fsh-copyfile": {
    "prefix": "fsh-copyfile",
    "body": ["from shutil import copyfile", "$0"]
  },
  "fsh-copytree": {
    "prefix": "fsh-copytree",
    "body": ["from shutil import copytree", "$0"]
  },

  // standard library: subprocess
  "fsu-called-process-error": {
    "prefix": "fsu-called-process-error",
    "body": ["from subprocess import CalledProcessError", "$0"]
  },
  "fsu-check-call": {
    "prefix": "fsu-check-call",
    "body": ["from subprocess import check_call", "$0"]
  },
  "fsu-check-output": {
    "prefix": "fsu-check-output",
    "body": ["from subprocess import check_output", "$0"]
  },
  "fsu-devnull": {
    "prefix": "fsu-devnull",
    "body": ["from subprocess import DEVNULL", "$0"]
  },
  "fsu-pipe": {
    "prefix": "fsu-pipe",
    "body": ["from subprocess import PIPE", "$0"]
  },
  "fsu-run": {
    "prefix": "fsu-run",
    "body": ["from subprocess import run", "$0"]
  },
  "fsu-stdout": {
    "prefix": "fsu-stdout",
    "body": ["from subprocess import STDOUT", "$0"]
  },

  // standard library: subprocess
  "fsy-argv": {
    "prefix": "fsy-argv",
    "body": ["from sys import argv", "$0"]
  },
  "fsy-stderr": {
    "prefix": "fsy-stderr",
    "body": ["from sys import stderr", "$0"]
  },
  "fsy-stdout": {
    "prefix": "fsy-stdout",
    "body": ["from sys import stdout", "$0"]
  },

  // standard library: time
  "fti-slee": {
    "prefix": "fti-slee",
    "body": ["from time import sleep", "$0"]
  },

  // standard library: typing
  "fty-annotated": {
    "prefix": "fty-annotated",
    "body": ["from typing import Annotated", "$0"]
  },
  "fty-any": { "prefix": "fty-any", "body": ["from typing import Any", "$0"] },
  "fty-any-str": {
    "prefix": "fty-any-str",
    "body": ["from typing import AnyStr", "$0"]
  },
  "fty-assert-never": {
    "prefix": "fty-assert-never",
    "body": ["from typing import assert_never", "$0"]
  },
  "fty-assert-type": {
    "prefix": "fty-assert-type",
    "body": ["from typing import assert_type", "$0"]
  },
  "fty-binary-io": {
    "prefix": "fty-binary-io",
    "body": ["from typing import BinaryIO", "$0"]
  },
  "fty-cast": {
    "prefix": "fty-cast",
    "body": ["from typing import cast", "$0"]
  },
  "fty-class-var": {
    "prefix": "fty-class-var",
    "body": ["from typing import ClassVar", "$0"]
  },
  "fty-clear-overloads": {
    "prefix": "fty-clear-overloads",
    "body": ["from typing import clear_overloads", "$0"]
  },
  "fty-concatenate": {
    "prefix": "fty-concatenate",
    "body": ["from typing import Concatenate", "$0"]
  },
  "fty-dataclass-transform": {
    "prefix": "fty-dataclass-transform",
    "body": ["from typing import dataclass_transform", "$0"]
  },
  "fty-final": {
    "prefix": "fty-final",
    "body": ["from typing import final", "$0"]
  },
  "fty-forward-ref": {
    "prefix": "fty-forward-ref",
    "body": ["from typing import ForwardRef", "$0"]
  },
  "fty-generic": {
    "prefix": "fty-generic",
    "body": ["from typing import Generic", "$0"]
  },
  "fty-get-args": {
    "prefix": "fty-get-args",
    "body": ["from typing import get_args", "$0"]
  },
  "fty-get-origin": {
    "prefix": "fty-get-origin",
    "body": ["from typing import get_origin", "$0"]
  },
  "fty-get-original-bases": {
    "prefix": "fty-get-original-bases",
    "body": ["from typing import get_original_bases", "$0"]
  },
  "fty-get-overloads": {
    "prefix": "fty-get-overloads",
    "body": ["from typing import get_overloads", "$0"]
  },
  "fty-get-type-hints": {
    "prefix": "fty-get-type-hints",
    "body": ["from typing import get_type_hints", "$0"]
  },
  "fty-io": { "prefix": "fty-io", "body": ["from typing import IO", "$0"] },
  "fty-is-typeddict": {
    "prefix": "fty-is-typeddict",
    "body": ["from typing import is_typeddict", "$0"]
  },
  "fty-literal": {
    "prefix": "fty-literal",
    "body": ["from typing import Literal", "$0"]
  },
  "fty-literal-string": {
    "prefix": "fty-literal-string",
    "body": ["from typing import LiteralString", "$0"]
  },
  "fty-named-tuple": {
    "prefix": "fty-named-tuple",
    "body": ["from typing import NamedTuple", "$0"]
  },
  "fty-never": {
    "prefix": "fty-never",
    "body": ["from typing import Never", "$0"]
  },
  "fty-new-type": {
    "prefix": "fty-new-type",
    "body": ["from typing import NewType", "$0"]
  },
  "fty-no-return": {
    "prefix": "fty-no-return",
    "body": ["from typing import NoReturn", "$0"]
  },
  "fty-no-type-check": {
    "prefix": "fty-no-type-check",
    "body": ["from typing import no_type_check", "$0"]
  },
  "fty-no-type-check-decorator": {
    "prefix": "fty-no-type-check-decorator",
    "body": ["from typing import no_type_check_decorator", "$0"]
  },
  "fty-not-required": {
    "prefix": "fty-not-required",
    "body": ["from typing import NotRequired", "$0"]
  },
  "fty-overload": {
    "prefix": "fty-overload",
    "body": ["from typing import overload", "$0"]
  },
  "fty-override": {
    "prefix": "fty-override",
    "body": ["from typing import override", "$0"]
  },
  "fty-param-spec": {
    "prefix": "fty-param-spec",
    "body": ["from typing import ParamSpec", "$0"]
  },
  "fty-param-spec-args": {
    "prefix": "fty-param-spec-args",
    "body": ["from typing import ParamSpecArgs", "$0"]
  },
  "fty-param-spec-kwargs": {
    "prefix": "fty-param-spec-kwargs",
    "body": ["from typing import ParamSpecKwargs", "$0"]
  },
  "fty-protocol": {
    "prefix": "fty-protocol",
    "body": ["from typing import Protocol", "$0"]
  },
  "fty-required": {
    "prefix": "fty-required",
    "body": ["from typing import Required", "$0"]
  },
  "fty-reveal-type": {
    "prefix": "fty-reveal-type",
    "body": ["from typing import reveal_type", "$0"]
  },
  "fty-runtime-checkable": {
    "prefix": "fty-runtime-checkable",
    "body": ["from typing import runtime_checkable", "$0"]
  },
  "fty-self": {
    "prefix": "fty-self",
    "body": ["from typing import Self", "$0"]
  },
  "fty-supports-abs": {
    "prefix": "fty-supports-abs",
    "body": ["from typing import SupportsAbs", "$0"]
  },
  "fty-supports-bytes": {
    "prefix": "fty-supports-bytes",
    "body": ["from typing import SupportsBytes", "$0"]
  },
  "fty-supports-complex": {
    "prefix": "fty-supports-complex",
    "body": ["from typing import SupportsComplex", "$0"]
  },
  "fty-supports-float": {
    "prefix": "fty-supports-float",
    "body": ["from typing import SupportsFloat", "$0"]
  },
  "fty-supports-index": {
    "prefix": "fty-supports-index",
    "body": ["from typing import SupportsIndex", "$0"]
  },
  "fty-supports-int": {
    "prefix": "fty-supports-int",
    "body": ["from typing import SupportsInt", "$0"]
  },
  "fty-supports-round": {
    "prefix": "fty-supports-round",
    "body": ["from typing import SupportsRound", "$0"]
  },
  "fty-text-io": {
    "prefix": "fty-text-io",
    "body": ["from typing import TextIO", "$0"]
  },
  "fty-type-alias": {
    "prefix": "fty-type-alias",
    "body": ["from typing import TypeAlias", "$0"]
  },
  "fty-type-alias-type": {
    "prefix": "fty-type-alias-type",
    "body": ["from typing import TypeAliasType", "$0"]
  },
  "fty-type-checking": {
    "prefix": "fty-type-checking",
    "body": ["from typing import TYPE_CHECKING", "$0"]
  },
  "fty-type-guard": {
    "prefix": "fty-type-guard",
    "body": ["from typing import TypeGuard", "$0"]
  },
  "fty-type-var": {
    "prefix": "fty-type-var",
    "body": ["from typing import TypeVar", "$0"]
  },
  "fty-type-var-tuple": {
    "prefix": "fty-type-var-tuple",
    "body": ["from typing import TypeVarTuple", "$0"]
  },
  "fty-typed-dict": {
    "prefix": "fty-typed-dict",
    "body": ["from typing import TypedDict", "$0"]
  },
  "fty-union": {
    "prefix": "fty-union",
    "body": ["from typing import Union", "$0"]
  },
  "fty-unpack": {
    "prefix": "fty-unpack",
    "body": ["from typing import Unpack", "$0"]
  },

  // third party: atomicwrites
  "fat-atomic-writer": {
    "prefix": "fat-atomic-writer",
    "body": ["from atomicwrites import AtomicWriter", "$0"]
  },
  "fat-atomic-write": {
    "prefix": "fat-atomic-write",
    "body": ["from atomicwrites import atomic_write", "$0"]
  },
  "fat-move-atomic": {
    "prefix": "fat-move-atomic",
    "body": ["from atomicwrites import move_atomic", "$0"]
  },
  "fat-replace-atomic": {
    "prefix": "fat-replace-atomic",
    "body": ["from atomicwrites import replace_atomic", "$0"]
  },

  // third party: beartype
  "fbe-beartype": {
    "prefix": "fbe-beartype",
    "body": ["from beartype import beartype", "$0"]
  },

  // third party: bidict
  "fbi-bidict": {
    "prefix": "fbi-bidict",
    "body": ["from bidict import bidict", "$0"]
  },

  // third party: bokeh
  "fbo-datetime-tick-formatter": {
    "prefix": "fbo-datetime-tick-formatter",
    "body": ["from bokeh.models import DatetimeTickFormatter", "$0"]
  },
  "fbo-hover-tool": {
    "prefix": "fbo-hover-tool",
    "body": ["from bokeh.models import HoverTool", "$0"]
  },
  "fbo-numeral-tick-formatter": {
    "prefix": "fbo-numeral-tick-formatter",
    "body": ["from bokeh.models import NumeralTickFormatter", "$0"]
  },

  // third party: cachetools
  "fca-cache": {
    "prefix": "fca-cache",
    "body": ["from cachetools import Cache", "$0"]
  },
  "fca-cached": {
    "prefix": "fca-cached",
    "body": ["from cachetools import cached", "$0"]
  },
  "fca-cachedmethod": {
    "prefix": "fca-cachedmethod",
    "body": ["from cachetools import cachedmethod", "$0"]
  },
  "fca-fifo-cache": {
    "prefix": "fca-fifo-cache",
    "body": ["from cachetools.func import fifo_cache", "$0"]
  },
  "fca-hashkey": {
    "prefix": "fca-hashkey",
    "body": ["from cachetools.keys import hashkey", "$0"]
  },
  "fca-lfu-cache": {
    "prefix": "fca-lfu-cache",
    "body": ["from cachetools.func import lfu_cache", "$0"]
  },
  "fca-lru-cache": {
    "prefix": "fca-lru-cache",
    "body": ["from cachetools.func import lru_cache", "$0"]
  },
  "fca-methodkey": {
    "prefix": "fca-methodkey",
    "body": ["from cachetools.keys import methodkey", "$0"]
  },
  "fca-mru-cache": {
    "prefix": "fca-mru-cache",
    "body": ["from cachetools.func import mru_cache", "$0"]
  },
  "fca-rr-cache": {
    "prefix": "fca-rr-cache",
    "body": ["from cachetools.func import rr_cache", "$0"]
  },
  "fca-tlru-cache": {
    "prefix": "fca-tlru-cache",
    "body": ["from cachetools import TLRUCache", "$0"]
  },
  "fca-ttl-cache": {
    "prefix": "fca-ttl-cache",
    "body": ["from cachetools.func import ttl_cache", "$0"]
  },
  "fca-typedkey": {
    "prefix": "fca-typedkey",
    "body": ["from cachetools.keys import typedkey", "$0"]
  },

  // third party: click
  "fcl-abort": {
    "prefix": "fcl-abort",
    "body": ["from click import Abort", "$0"]
  },
  "fcl-argument": {
    "prefix": "fcl-argument",
    "body": ["from click import argument", "$0"]
  },
  "fcl-bad-argument-usage": {
    "prefix": "fcl-bad-argument-usage",
    "body": ["from click import BadArgumentUsage", "$0"]
  },
  "fcl-bad-option-usage": {
    "prefix": "fcl-bad-option-usage",
    "body": ["from click import BadOptionUsage", "$0"]
  },
  "fcl-bad-parameter": {
    "prefix": "fcl-bad-parameter",
    "body": ["from click import BadParameter", "$0"]
  },
  "fcl-base-command": {
    "prefix": "fcl-base-command",
    "body": ["from click import BaseCommand", "$0"]
  },
  "fcl-bool": {
    "prefix": "fcl-bool",
    "body": ["from click import BOOL", "$0"]
  },
  "fcl-choice": {
    "prefix": "fcl-choice",
    "body": ["from click import Choice", "$0"]
  },
  "fcl-clear": {
    "prefix": "fcl-clear",
    "body": ["from click import clear", "$0"]
  },
  "fcl-click-exception": {
    "prefix": "fcl-click-exception",
    "body": ["from click import ClickException", "$0"]
  },
  "fcl-command": {
    "prefix": "fcl-command",
    "body": ["from click import command", "$0"]
  },
  "fcl-command-collection": {
    "prefix": "fcl-command-collection",
    "body": ["from click import CommandCollection", "$0"]
  },
  "fcl-confirm": {
    "prefix": "fcl-confirm",
    "body": ["from click import confirm", "$0"]
  },
  "fcl-confirmation-option": {
    "prefix": "fcl-confirmation-option",
    "body": ["from click import confirmation_option", "$0"]
  },
  "fcl-context": {
    "prefix": "fcl-context",
    "body": ["from click import Context", "$0"]
  },
  "fcl-core": {
    "prefix": "fcl-core",
    "body": ["from click import core", "$0"]
  },
  "fcl-date-time": {
    "prefix": "fcl-date-time",
    "body": ["from click import DateTime", "$0"]
  },
  "fcl-decorators": {
    "prefix": "fcl-decorators",
    "body": ["from click import decorators", "$0"]
  },
  "fcl-echo": {
    "prefix": "fcl-echo",
    "body": ["from click import echo", "$0"]
  },
  "fcl-echo-via-pager": {
    "prefix": "fcl-echo-via-pager",
    "body": ["from click import echo_via_pager", "$0"]
  },
  "fcl-edit": {
    "prefix": "fcl-edit",
    "body": ["from click import edit", "$0"]
  },
  "fcl-exceptions": {
    "prefix": "fcl-exceptions",
    "body": ["from click import exceptions", "$0"]
  },
  "fcl-file": {
    "prefix": "fcl-file",
    "body": ["from click import File", "$0"]
  },
  "fcl-file-error": {
    "prefix": "fcl-file-error",
    "body": ["from click import FileError", "$0"]
  },
  "fcl-float": {
    "prefix": "fcl-float",
    "body": ["from click import FLOAT", "$0"]
  },
  "fcl-float-range": {
    "prefix": "fcl-float-range",
    "body": ["from click import FloatRange", "$0"]
  },
  "fcl-format-filename": {
    "prefix": "fcl-format-filename",
    "body": ["from click import format_filename", "$0"]
  },
  "fcl-formatting": {
    "prefix": "fcl-formatting",
    "body": ["from click import formatting", "$0"]
  },
  "fcl-get-app-dir": {
    "prefix": "fcl-get-app-dir",
    "body": ["from click import get_app_dir", "$0"]
  },
  "fcl-get-binary-stream": {
    "prefix": "fcl-get-binary-stream",
    "body": ["from click import get_binary_stream", "$0"]
  },
  "fcl-get-current-context": {
    "prefix": "fcl-get-current-context",
    "body": ["from click import get_current_context", "$0"]
  },
  "fcl-get-text-stream": {
    "prefix": "fcl-get-text-stream",
    "body": ["from click import get_text_stream", "$0"]
  },
  "fcl-getchar": {
    "prefix": "fcl-getchar",
    "body": ["from click import getchar", "$0"]
  },
  "fcl-globals": {
    "prefix": "fcl-globals",
    "body": ["from click import globals", "$0"]
  },
  "fcl-group": {
    "prefix": "fcl-group",
    "body": ["from click import group", "$0"]
  },
  "fcl-help-formatter": {
    "prefix": "fcl-help-formatter",
    "body": ["from click import HelpFormatter", "$0"]
  },
  "fcl-help-option": {
    "prefix": "fcl-help-option",
    "body": ["from click import help_option", "$0"]
  },
  "fcl-int": {
    "prefix": "fcl-int",
    "body": ["from click import INT", "$0"]
  },
  "fcl-int-range": {
    "prefix": "fcl-int-range",
    "body": ["from click import IntRange", "$0"]
  },
  "fcl-launch": {
    "prefix": "fcl-launch",
    "body": ["from click import launch", "$0"]
  },
  "fcl-make-pass-decorator": {
    "prefix": "fcl-make-pass-decorator",
    "body": ["from click import make_pass_decorator", "$0"]
  },
  "fcl-missing-parameter": {
    "prefix": "fcl-missing-parameter",
    "body": ["from click import MissingParameter", "$0"]
  },
  "fcl-multi-command": {
    "prefix": "fcl-multi-command",
    "body": ["from click import MultiCommand", "$0"]
  },
  "fcl-no-such-option": {
    "prefix": "fcl-no-such-option",
    "body": ["from click import NoSuchOption", "$0"]
  },
  "fcl-open-file": {
    "prefix": "fcl-open-file",
    "body": ["from click import open_file", "$0"]
  },
  "fcl-option": {
    "prefix": "fcl-option",
    "body": ["from click import option", "$0"]
  },
  "fcl-option-parser": {
    "prefix": "fcl-option-parser",
    "body": ["from click import OptionParser", "$0"]
  },
  "fcl-param-type": {
    "prefix": "fcl-param-type",
    "body": ["from click import ParamType", "$0"]
  },
  "fcl-parameter": {
    "prefix": "fcl-parameter",
    "body": ["from click import Parameter", "$0"]
  },
  "fcl-parser": {
    "prefix": "fcl-parser",
    "body": ["from click import parser", "$0"]
  },
  "fcl-pass-context": {
    "prefix": "fcl-pass-context",
    "body": ["from click import pass_context", "$0"]
  },
  "fcl-pass-obj": {
    "prefix": "fcl-pass-obj",
    "body": ["from click import pass_obj", "$0"]
  },
  "fcl-password-option": {
    "prefix": "fcl-password-option",
    "body": ["from click import password_option", "$0"]
  },
  "fcl-path": {
    "prefix": "fcl-path",
    "body": ["from click import Path", "$0"]
  },
  "fcl-pause": {
    "prefix": "fcl-pause",
    "body": ["from click import pause", "$0"]
  },
  "fcl-progressbar": {
    "prefix": "fcl-progressbar",
    "body": ["from click import progressbar", "$0"]
  },
  "fcl-prompt": {
    "prefix": "fcl-prompt",
    "body": ["from click import prompt", "$0"]
  },
  "fcl-secho": {
    "prefix": "fcl-secho",
    "body": ["from click import secho", "$0"]
  },
  "fcl-string": {
    "prefix": "fcl-string",
    "body": ["from click import STRING", "$0"]
  },
  "fcl-style": {
    "prefix": "fcl-style",
    "body": ["from click import style", "$0"]
  },
  "fcl-termui": {
    "prefix": "fcl-termui",
    "body": ["from click import termui", "$0"]
  },
  "fcl-tuple": {
    "prefix": "fcl-tuple",
    "body": ["from click import Tuple", "$0"]
  },
  "fcl-types": {
    "prefix": "fcl-types",
    "body": ["from click import types", "$0"]
  },
  "fcl-unprocessed": {
    "prefix": "fcl-unprocessed",
    "body": ["from click import UNPROCESSED", "$0"]
  },
  "fcl-unstyle": {
    "prefix": "fcl-unstyle",
    "body": ["from click import unstyle", "$0"]
  },
  "fcl-usage-error": {
    "prefix": "fcl-usage-error",
    "body": ["from click import UsageError", "$0"]
  },
  "fcl-utils": {
    "prefix": "fcl-utils",
    "body": ["from click import utils", "$0"]
  },
  "fcl-uuid": {
    "prefix": "fcl-uuid",
    "body": ["from click import UUID", "$0"]
  },
  "fcl-version-option": {
    "prefix": "fcl-version-option",
    "body": ["from click import version_option", "$0"]
  },
  "fcl-wrap-text": {
    "prefix": "fcl-wrap-text",
    "body": ["from click import wrap_text", "$0"]
  },

  // third party: cvxpy
  "fcv-constraint": {
    "prefix": "fcv-constraint",
    "body": ["from cvxpy import Constraint", "$0"]
  },
  "fcv-expression": {
    "prefix": "fcv-expression",
    "body": ["from cvxpy import Expression", "$0"]
  },
  "fcv-maximize": {
    "prefix": "fcv-maximize",
    "body": ["from cvxpy import Maximize", "$0"]
  },
  "fcv-minimize": {
    "prefix": "fcv-minimize",
    "body": ["from cvxpy import Minimize", "$0"]
  },
  "fcv-multiply": {
    "prefix": "fcv-multiply",
    "body": ["from cvxpy import multiply", "$0"]
  },
  "fcv-norm": {
    "prefix": "fcv-norm",
    "body": ["from cvxpy import norm", "$0"]
  },
  "fcv-problem": {
    "prefix": "fcv-problem",
    "body": ["from cvxpy import Problem", "$0"]
  },
  "fcv-scalar-product": {
    "prefix": "fcv-scalar-product",
    "body": ["from cvxpy import scalar_product", "$0"]
  },
  "fcv-variable": {
    "prefix": "fcv-variable",
    "body": ["from cvxpy import Variable", "$0"]
  },

  // third party: fastapi
  "ffa-fastapi": {
    "prefix": "ffa-fastapi",
    "body": ["from fastapi import FastAPI", "$0"]
  },

  // third party: hypothesis
  "fhy-array-dtypes": {
    "prefix": "fhy-array-dtypes",
    "body": ["from hypothesis.extra.numpy import array_dtypes", "$0"]
  },
  "fhy-array-shapes": {
    "prefix": "fhy-array-shapes",
    "body": ["from hypothesis.extra.numpy import array_shapes", "$0"]
  },
  "fhy-arrays": {
    "prefix": "fhy-arrays",
    "body": ["from hypothesis.extra.numpy import arrays", "$0"]
  },
  "fhy-assume": {
    "prefix": "fhy-assume",
    "body": ["from hypothesis import assume", "$0"]
  },
  "fhy-basic-indices": {
    "prefix": "fhy-basic-indices",
    "body": ["from hypothesis.extra.numpy import basic_indices", "$0"]
  },
  "fhy-binary": {
    "prefix": "fhy-binary",
    "body": ["from hypothesis.strategies import binary", "$0"]
  },
  "fhy-boolean-dtypes": {
    "prefix": "fhy-boolean-dtypes",
    "body": ["from hypothesis.extra.numpy import boolean_dtypes", "$0"]
  },
  "fhy-booleans": {
    "prefix": "fhy-booleans",
    "body": ["from hypothesis.strategies import booleans", "$0"]
  },
  "fhy-broadcastable-shapes": {
    "prefix": "fhy-broadcastable-shapes",
    "body": ["from hypothesis.extra.numpy import broadcastable_shapes", "$0"]
  },
  "fhy-builds": {
    "prefix": "fhy-builds",
    "body": ["from hypothesis.strategies import builds", "$0"]
  },
  "fhy-byte-string-dtypes": {
    "prefix": "fhy-byte-string-dtypes",
    "body": ["from hypothesis.extra.numpy import byte_string_dtypes", "$0"]
  },
  "fhy-characters": {
    "prefix": "fhy-characters",
    "body": ["from hypothesis.strategies import characters", "$0"]
  },
  "fhy-column": {
    "prefix": "fhy-column",
    "body": ["from hypothesis.extra.pandas import column", "$0"]
  },
  "fhy-columns": {
    "prefix": "fhy-columns",
    "body": ["from hypothesis.extra.pandas import columns", "$0"]
  },
  "fhy-complex-number-dtypes": {
    "prefix": "fhy-complex-number-dtypes",
    "body": ["from hypothesis.extra.numpy import complex_number_dtypes", "$0"]
  },
  "fhy-complex-numbers": {
    "prefix": "fhy-complex-numbers",
    "body": ["from hypothesis.strategies import complex_numbers", "$0"]
  },
  "fhy-composite": {
    "prefix": "fhy-composite",
    "body": ["from hypothesis.strategies import composite", "$0"]
  },
  "fhy-currently-in-test-context": {
    "prefix": "fhy-currently-in-test-context",
    "body": ["from hypothesis import currently_in_test_context", "$0"]
  },
  "fhy-data": {
    "prefix": "fhy-data",
    "body": ["from hypothesis.strategies import data", "$0"]
  },
  "fhy-data-frames": {
    "prefix": "fhy-data-frames",
    "body": ["from hypothesis.extra.pandas import data_frames", "$0"]
  },
  "fhy-data-object": {
    "prefix": "fhy-data-object",
    "body": ["from hypothesis.strategies import DataObject", "$0"]
  },
  "fhy-dates": {
    "prefix": "fhy-dates",
    "body": ["from hypothesis.strategies import dates", "$0"]
  },
  "fhy-datetime64-dtypes": {
    "prefix": "fhy-datetime64-dtypes",
    "body": ["from hypothesis.extra.numpy import datetime64_dtypes", "$0"]
  },
  "fhy-datetimes": {
    "prefix": "fhy-datetimes",
    "body": ["from hypothesis.strategies import datetimes", "$0"]
  },
  "fhy-decimals": {
    "prefix": "fhy-decimals",
    "body": ["from hypothesis.strategies import decimals", "$0"]
  },
  "fhy-deferred": {
    "prefix": "fhy-deferred",
    "body": ["from hypothesis.strategies import deferred", "$0"]
  },
  "fhy-dictionaries": {
    "prefix": "fhy-dictionaries",
    "body": ["from hypothesis.strategies import dictionaries", "$0"]
  },
  "fhy-draw-fn": {
    "prefix": "fhy-draw-fn",
    "body": ["from hypothesis.strategies import DrawFn", "$0"]
  },
  "fhy-emails": {
    "prefix": "fhy-emails",
    "body": ["from hypothesis.strategies import emails", "$0"]
  },
  "fhy-event": {
    "prefix": "fhy-event",
    "body": ["from hypothesis import event", "$0"]
  },
  "fhy-example": {
    "prefix": "fhy-example",
    "body": ["from hypothesis import example", "$0"]
  },
  "fhy-find": {
    "prefix": "fhy-find",
    "body": ["from hypothesis import find", "$0"]
  },
  "fhy-fixed-dictionaries": {
    "prefix": "fhy-fixed-dictionaries",
    "body": ["from hypothesis.strategies import fixed_dictionaries", "$0"]
  },
  "fhy-floating-dtypes": {
    "prefix": "fhy-floating-dtypes",
    "body": ["from hypothesis.extra.numpy import floating_dtypes", "$0"]
  },
  "fhy-floats": {
    "prefix": "fhy-floats",
    "body": ["from hypothesis.strategies import floats", "$0"]
  },
  "fhy-fractions": {
    "prefix": "fhy-fractions",
    "body": ["from hypothesis.strategies import fractions", "$0"]
  },
  "fhy-from-dtype": {
    "prefix": "fhy-from-dtype",
    "body": ["from hypothesis.extra.numpy import from_dtype", "$0"]
  },
  "fhy-from-regex": {
    "prefix": "fhy-from-regex",
    "body": ["from hypothesis.strategies import from_regex", "$0"]
  },
  "fhy-from-type": {
    "prefix": "fhy-from-type",
    "body": ["from hypothesis.strategies import from_type", "$0"]
  },
  "fhy-frozensets": {
    "prefix": "fhy-frozensets",
    "body": ["from hypothesis.strategies import frozensets", "$0"]
  },
  "fhy-functions": {
    "prefix": "fhy-functions",
    "body": ["from hypothesis.strategies import functions", "$0"]
  },
  "fhy-given": {
    "prefix": "fhy-given",
    "body": ["from hypothesis import given", "$0"]
  },
  "fhy-health-check": {
    "prefix": "fhy-health-check",
    "body": ["from hypothesis import HealthCheck", "$0"]
  },
  "fhy-indexes": {
    "prefix": "fhy-indexes",
    "body": ["from hypothesis.extra.pandas import indexes", "$0"]
  },
  "fhy-infer": {
    "prefix": "fhy-infer",
    "body": ["from hypothesis import infer", "$0"]
  },
  "fhy-integer-array-indices": {
    "prefix": "fhy-integer-array-indices",
    "body": ["from hypothesis.extra.numpy import integer_array_indices", "$0"]
  },
  "fhy-integer-dtypes": {
    "prefix": "fhy-integer-dtypes",
    "body": ["from hypothesis.extra.numpy import integer_dtypes", "$0"]
  },
  "fhy-integers": {
    "prefix": "fhy-integers",
    "body": ["from hypothesis.strategies import integers", "$0"]
  },
  "fhy-ip-addresses": {
    "prefix": "fhy-ip-addresses",
    "body": ["from hypothesis.strategies import ip_addresses", "$0"]
  },
  "fhy-iterables": {
    "prefix": "fhy-iterables",
    "body": ["from hypothesis.strategies import iterables", "$0"]
  },
  "fhy-just": {
    "prefix": "fhy-just",
    "body": ["from hypothesis.strategies import just", "$0"]
  },
  "fhy-lists": {
    "prefix": "fhy-lists",
    "body": ["from hypothesis.strategies import lists", "$0"]
  },
  "fhy-mutually-broadcastable-shapes": {
    "prefix": "fhy-mutually-broadcastable-shapes",
    "body": [
      "from hypothesis.extra.numpy import mutually_broadcastable_shapes",
      "$0"
    ]
  },
  "fhy-nested-dtypes": {
    "prefix": "fhy-nested-dtypes",
    "body": ["from hypothesis.extra.numpy import nested_dtypes", "$0"]
  },
  "fhy-none": {
    "prefix": "fhy-none",
    "body": ["from hypothesis.strategies import none", "$0"]
  },
  "fhy-note": {
    "prefix": "fhy-note",
    "body": ["from hypothesis import note", "$0"]
  },
  "fhy-nothing": {
    "prefix": "fhy-nothing",
    "body": ["from hypothesis.strategies import nothing", "$0"]
  },
  "fhy-one-of": {
    "prefix": "fhy-one-of",
    "body": ["from hypothesis.strategies import one_of", "$0"]
  },
  "fhy-permutations": {
    "prefix": "fhy-permutations",
    "body": ["from hypothesis.strategies import permutations", "$0"]
  },
  "fhy-phase": {
    "prefix": "fhy-phase",
    "body": ["from hypothesis import Phase", "$0"]
  },
  "fhy-random-module": {
    "prefix": "fhy-random-module",
    "body": ["from hypothesis.strategies import random_module", "$0"]
  },
  "fhy-randoms": {
    "prefix": "fhy-randoms",
    "body": ["from hypothesis.strategies import randoms", "$0"]
  },
  "fhy-range-indexes": {
    "prefix": "fhy-range-indexes",
    "body": ["from hypothesis.extra.pandas import range_indexes", "$0"]
  },
  "fhy-recursive": {
    "prefix": "fhy-recursive",
    "body": ["from hypothesis.strategies import recursive", "$0"]
  },
  "fhy-register-random": {
    "prefix": "fhy-register-random",
    "body": ["from hypothesis import register_random", "$0"]
  },
  "fhy-register-type-strategy": {
    "prefix": "fhy-register-type-strategy",
    "body": ["from hypothesis.strategies import register_type_strategy", "$0"]
  },
  "fhy-reject": {
    "prefix": "fhy-reject",
    "body": ["from hypothesis import reject", "$0"]
  },
  "fhy-reproduce-failure": {
    "prefix": "fhy-reproduce-failure",
    "body": ["from hypothesis import reproduce_failure", "$0"]
  },
  "fhy-runner": {
    "prefix": "fhy-runner",
    "body": ["from hypothesis.strategies import runner", "$0"]
  },
  "fhy-sampled-from": {
    "prefix": "fhy-sampled-from",
    "body": ["from hypothesis.strategies import sampled_from", "$0"]
  },
  "fhy-scalar-dtypes": {
    "prefix": "fhy-scalar-dtypes",
    "body": ["from hypothesis.extra.numpy import scalar_dtypes", "$0"]
  },
  "fhy-search-strategy": {
    "prefix": "fhy-search-strategy",
    "body": ["from hypothesis.strategies import SearchStrategy", "$0"]
  },
  "fhy-seed": {
    "prefix": "fhy-seed",
    "body": ["from hypothesis import seed", "$0"]
  },
  "fhy-series": {
    "prefix": "fhy-series",
    "body": ["from hypothesis.extra.pandas import series", "$0"]
  },
  "fhy-sets": {
    "prefix": "fhy-sets",
    "body": ["from hypothesis.strategies import sets", "$0"]
  },
  "fhy-settings": {
    "prefix": "fhy-settings",
    "body": ["from hypothesis import settings", "$0"]
  },
  "fhy-shared": {
    "prefix": "fhy-shared",
    "body": ["from hypothesis.strategies import shared", "$0"]
  },
  "fhy-slices": {
    "prefix": "fhy-slices",
    "body": ["from hypothesis.strategies import slices", "$0"]
  },
  "fhy-target": {
    "prefix": "fhy-target",
    "body": ["from hypothesis import target", "$0"]
  },
  "fhy-text": {
    "prefix": "fhy-text",
    "body": ["from hypothesis.strategies import text", "$0"]
  },
  "fhy-timedelta64-dtypes": {
    "prefix": "fhy-timedelta64-dtypes",
    "body": ["from hypothesis.extra.numpy import timedelta64_dtypes", "$0"]
  },
  "fhy-timedeltas": {
    "prefix": "fhy-timedeltas",
    "body": ["from hypothesis.strategies import timedeltas", "$0"]
  },
  "fhy-times": {
    "prefix": "fhy-times",
    "body": ["from hypothesis.strategies import times", "$0"]
  },
  "fhy-timezone-keys": {
    "prefix": "fhy-timezone-keys",
    "body": ["from hypothesis.strategies import timezone_keys", "$0"]
  },
  "fhy-timezones": {
    "prefix": "fhy-timezones",
    "body": ["from hypothesis.strategies import timezones", "$0"]
  },
  "fhy-tuples": {
    "prefix": "fhy-tuples",
    "body": ["from hypothesis.strategies import tuples", "$0"]
  },
  "fhy-unicode-string-dtypes": {
    "prefix": "fhy-unicode-string-dtypes",
    "body": ["from hypothesis.extra.numpy import unicode_string_dtypes", "$0"]
  },
  "fhy-unsigned-integer-dtypes": {
    "prefix": "fhy-unsigned-integer-dtypes",
    "body": ["from hypothesis.extra.numpy import unsigned_integer_dtypes", "$0"]
  },
  "fhy-uuids": {
    "prefix": "fhy-uuids",
    "body": ["from hypothesis.strategies import uuids", "$0"]
  },
  "fhy-valid-tuple-axes": {
    "prefix": "fhy-valid-tuple-axes",
    "body": ["from hypothesis.extra.numpy import valid_tuple_axes", "$0"]
  },
  "fhy-verbosity": {
    "prefix": "fhy-verbosity",
    "body": ["from hypothesis import Verbosity", "$0"]
  },

  // third party: loguru
  "flo-logger": {
    "prefix": "flo-logger",
    "body": ["from loguru import logger", "$0"]
  },

  // third party: numpy
  "fnu-allclose": {
    "prefix": "fnu-allclose",
    "body": ["from numpy import allclose", "$0"]
  },
  "fnu-arange": {
    "prefix": "fnu-arange",
    "body": ["from numpy import arange", "$0"]
  },
  "fnu-array": {
    "prefix": "fnu-array",
    "body": ["from numpy import array", "$0"]
  },
  "fnu-block": {
    "prefix": "fnu-block",
    "body": ["from numpy import block", "$0"]
  },
  "fnu-bool": {
    "prefix": "fnu-bool",
    "body": ["from numpy import bool_", "$0"]
  },
  "fnu-ceil": {
    "prefix": "fnu-ceil",
    "body": ["from numpy import ceil", "$0"]
  },
  "fnu-cholesky": {
    "prefix": "fnu-cholesky",
    "body": ["from numpy.linalg import cholesky", "$0"]
  },
  "fnu-concatenate": {
    "prefix": "fnu-concatenate",
    "body": ["from numpy import concatenate", "$0"]
  },
  "fnu-corrcoef": {
    "prefix": "fnu-corrcoef",
    "body": ["from numpy import corrcoef", "$0"]
  },
  "fnu-cumsum": {
    "prefix": "fnu-cumsum",
    "body": ["from numpy import cumsum", "$0"]
  },
  "fnu-diag": {
    "prefix": "fnu-diag",
    "body": ["from numpy import diag", "$0"]
  },
  "fnu-empty": {
    "prefix": "fnu-empty",
    "body": ["from numpy import empty", "$0"]
  },
  "fnu-eye": {
    "prefix": "fnu-eye",
    "body": ["from numpy import eye", "$0"]
  },
  "fnu-isclose": {
    "prefix": "fnu-isclose",
    "body": ["from numpy import isclose", "$0"]
  },
  "fnu-nan": {
    "prefix": "fnu-nan",
    "body": ["from numpy import nan", "$0"]
  },
  "fnu-sqrt": {
    "prefix": "fnu-sqrt",
    "body": ["from numpy import sqrt", "$0"]
  },
  "fnu-vstack": {
    "prefix": "fnu-vstack",
    "body": ["from numpy import vstack", "$0"]
  },
  "fnu-zeros": {
    "prefix": "fnu-zeros",
    "body": ["from numpy import zeros", "$0"]
  },
  "fnu-zeros-like": {
    "prefix": "fnu-zeros-like",
    "body": ["from numpy import zeros_like", "$0"]
  },

  // third party: pandas
  "fpa-assert-frame-equal": {
    "prefix": "fpa-assert-frame-equal",
    "body": ["from pandas.testing import assert_frame_equal", "$0"]
  },
  "fpa-assert-index-equal": {
    "prefix": "fpa-assert-index-equal",
    "body": ["from pandas.testing import assert_index_equal", "$0"]
  },
  "fpa-assert-series-equal": {
    "prefix": "fpa-assert-series-equal",
    "body": ["from pandas.testing import assert_series_equal", "$0"]
  },
  "fpa-bday": {
    "prefix": "fpa-bday",
    "body": ["from pandas.tseries.offsets import BDay", "$0"]
  },
  "fpa-bdate-range": {
    "prefix": "fpa-bdate-range",
    "body": ["from pandas import bdate_range", "$0"]
  },
  "fpa-boolean-dtype": {
    "prefix": "fpa-boolean-dtype",
    "body": ["from pandas import BooleanDtype", "$0"]
  },
  "fpa-concat": {
    "prefix": "fpa-concat",
    "body": ["from pandas import concat", "$0"]
  },
  "fpa-date-offset": {
    "prefix": "fpa-date-offset",
    "body": ["from pandas import DateOffset", "$0"]
  },
  "fpa-date-range": {
    "prefix": "fpa-date-range",
    "body": ["from pandas import date_range", "$0"]
  },
  "fpa-datetime-index": {
    "prefix": "fpa-datetime-index",
    "body": ["from pandas import DatetimeIndex", "$0"]
  },
  "fpa-hour": {
    "prefix": "fpa-hour",
    "body": ["from pandas.tseries.offsets import Hour", "$0"]
  },
  "fpa-index": {
    "prefix": "fpa-index",
    "body": ["from pandas import Index", "$0"]
  },
  "fpa-int64-dtype": {
    "prefix": "fpa-int64-dtype",
    "body": ["from pandas import Int64Dtype", "$0"]
  },
  "fpa-micro": {
    "prefix": "fpa-micro",
    "body": ["from pandas.tseries.offsets import Micro", "$0"]
  },
  "fpa-milli": {
    "prefix": "fpa-milli",
    "body": ["from pandas.tseries.offsets import Milli", "$0"]
  },
  "fpa-minute": {
    "prefix": "fpa-minute",
    "body": ["from pandas.tseries.offsets import Minute", "$0"]
  },
  "fpa-month-begin": {
    "prefix": "fpa-month-begin",
    "body": ["from pandas.tseries.offsets import MonthBegin", "$0"]
  },
  "fpa-month-end": {
    "prefix": "fpa-month-end",
    "body": ["from pandas.tseries.offsets import MonthEnd", "$0"]
  },
  "fpa-multi-index": {
    "prefix": "fpa-multi-index",
    "body": ["from pandas import MultiIndex", "$0"]
  },
  "fpa-na": { "prefix": "fpa-na", "body": ["from pandas import NA", "$0"] },
  "fpa-na-type": {
    "prefix": "fpa-na-type",
    "body": ["from pandas._libs.missing import NAType", "$0"]
  },
  "fpa-nano": {
    "prefix": "fpa-nano",
    "body": ["from pandas.tseries.offsets import Nano", "$0"]
  },
  "fpa-option-context": {
    "prefix": "fpa-option-context",
    "body": ["from pandas import option_context", "$0"]
  },
  "fpa-qcut": {
    "prefix": "fpa-qcut",
    "body": ["from pandas import qcut", "$0"]
  },
  "fpa-range-index": {
    "prefix": "fpa-range-index",
    "body": ["from pandas import RangeIndex", "$0"]
  },
  "fpa-read-pickle": {
    "prefix": "fpa-read-pickle",
    "body": ["from pandas import read_pickle", "$0"]
  },
  "fpa-read-sql": {
    "prefix": "fpa-read-sql",
    "body": ["from pandas import read_sql", "$0"]
  },
  "fpa-read-table": {
    "prefix": "fpa-read-table",
    "body": ["from pandas import read_table", "$0"]
  },
  "fpa-second": {
    "prefix": "fpa-second",
    "body": ["from pandas.tseries.offsets import Second", "$0"]
  },
  "fpa-set-option": {
    "prefix": "fpa-set-option",
    "body": ["from pandas import set_option", "$0"]
  },
  "fpa-string-dtype": {
    "prefix": "fpa-string-dtype",
    "body": ["from pandas import StringDtype", "$0"]
  },
  "fpa-timedelta": {
    "prefix": "fpa-timedelta",
    "body": ["from pandas import Timedelta", "$0"]
  },
  "fpa-timedelta-index": {
    "prefix": "fpa-timedelta-index",
    "body": ["from pandas import TimedeltaIndex", "$0"]
  },
  "fpa-timestamp": {
    "prefix": "fpa-timestamp",
    "body": ["from pandas import Timestamp", "$0"]
  },
  "fpa-to-datetime": {
    "prefix": "fpa-to-datetime",
    "body": ["from pandas import to_datetime", "$0"]
  },
  "fpa-to-pickle": {
    "prefix": "fpa-to-pickle",
    "body": ["from pandas import to_pickle", "$0"]
  },
  "fpa-week": {
    "prefix": "fpa-week",
    "body": ["from pandas.tseries.offsets import Week", "$0"]
  },

  // third party: polars
  "fpo-array": {
    "prefix": "fpo-array",
    "body": ["from polars import Array", "$0"]
  },
  "fpo-assert-frame-equal": {
    "prefix": "fpo-assert-frame-equal",
    "body": ["from polars.testing import assert_frame_equal", "$0"]
  },
  "fpo-assert-frame-not-equal": {
    "prefix": "fpo-assert-frame-not-equal",
    "body": ["from polars.testing import assert_frame_not_equal", "$0"]
  },
  "fpo-assert-series-equal": {
    "prefix": "fpo-assert-series-equal",
    "body": ["from polars.testing import assert_series_equal", "$0"]
  },
  "fpo-assert-series-not-equal": {
    "prefix": "fpo-assert-series-not-equal",
    "body": ["from polars.testing import assert_series_not_equal", "$0"]
  },
  "fpo-binary": {
    "prefix": "fpo-binary",
    "body": ["from polars import Binary", "$0"]
  },
  "fpo-boolean": {
    "prefix": "fpo-boolean",
    "body": ["from polars import Boolean", "$0"]
  },
  "fpo-categorical": {
    "prefix": "fpo-categorical",
    "body": ["from polars import Categorical", "$0"]
  },
  "fpo-col": { "prefix": "fpo-col", "body": ["from polars import col", "$0"] },
  "fpo-concat": {
    "prefix": "fpo-concat",
    "body": ["from polars import concat", "$0"]
  },
  "fpo-config": {
    "prefix": "fpo-config",
    "body": ["from polars import Config", "$0"]
  },
  "fpo-data-frame": {
    "prefix": "fpo-data-frame",
    "body": ["from polars import DataFrame", "$0"]
  },
  "fpo-data-type": {
    "prefix": "fpo-data-type",
    "body": ["from polars import DataType", "$0"]
  },
  "fpo-data-type-class": {
    "prefix": "fpo-data-type-class",
    "body": ["from polars.datatypes import DataTypeClass", "$0"]
  },
  "fpo-date": {
    "prefix": "fpo-date",
    "body": ["from polars import Date", "$0"]
  },
  "fpo-datetime": {
    "prefix": "fpo-datetime",
    "body": ["from polars import Datetime", "$0"]
  },
  "fpo-decimal": {
    "prefix": "fpo-decimal",
    "body": ["from polars import Decimal", "$0"]
  },
  "fpo-duration": {
    "prefix": "fpo-duration",
    "body": ["from polars import Duration", "$0"]
  },
  "fpo-float32": {
    "prefix": "fpo-float32",
    "body": ["from polars import Float32", "$0"]
  },
  "fpo-float64": {
    "prefix": "fpo-float64",
    "body": ["from polars import Float64", "$0"]
  },
  "fpo-int16": {
    "prefix": "fpo-int16",
    "body": ["from polars import Int16", "$0"]
  },
  "fpo-int32": {
    "prefix": "fpo-int32",
    "body": ["from polars import Int32", "$0"]
  },
  "fpo-int64": {
    "prefix": "fpo-int64",
    "body": ["from polars import Int64", "$0"]
  },
  "fpo-int8": {
    "prefix": "fpo-int8",
    "body": ["from polars import Int8", "$0"]
  },
  "fpo-list": {
    "prefix": "fpo-list",
    "body": ["from polars import List", "$0"]
  },
  "fpo-lit": { "prefix": "fpo-lit", "body": ["from polars import lit", "$0"] },
  "fpo-null": {
    "prefix": "fpo-null",
    "body": ["from polars import Null", "$0"]
  },
  "fpo-object": {
    "prefix": "fpo-object",
    "body": ["from polars import Object", "$0"]
  },
  "fpo-polars-data-type": {
    "prefix": "fpo-polars-data-type",
    "body": ["from polars import PolarsDataType", "$0"]
  },
  "fpo-read-avro": {
    "prefix": "fpo-read-avro",
    "body": ["from polars import read_avro", "$0"]
  },
  "fpo-read-csv": {
    "prefix": "fpo-read-csv",
    "body": ["from polars import read_csv", "$0"]
  },
  "fpo-read-csv-batched": {
    "prefix": "fpo-read-csv-batched",
    "body": ["from polars import read_csv_batched", "$0"]
  },
  "fpo-read-database": {
    "prefix": "fpo-read-database",
    "body": ["from polars import read_database", "$0"]
  },
  "fpo-read-database-uri": {
    "prefix": "fpo-read-database-uri",
    "body": ["from polars import read_database_uri", "$0"]
  },
  "fpo-read-delta": {
    "prefix": "fpo-read-delta",
    "body": ["from polars import read_delta", "$0"]
  },
  "fpo-read-excel": {
    "prefix": "fpo-read-excel",
    "body": ["from polars import read_excel", "$0"]
  },
  "fpo-read-ipc": {
    "prefix": "fpo-read-ipc",
    "body": ["from polars import read_ipc", "$0"]
  },
  "fpo-read-ipc-schema": {
    "prefix": "fpo-read-ipc-schema",
    "body": ["from polars import read_ipc_schema", "$0"]
  },
  "fpo-read-ipc-stream": {
    "prefix": "fpo-read-ipc-stream",
    "body": ["from polars import read_ipc_stream", "$0"]
  },
  "fpo-read-json": {
    "prefix": "fpo-read-json",
    "body": ["from polars import read_json", "$0"]
  },
  "fpo-read-ndjson": {
    "prefix": "fpo-read-ndjson",
    "body": ["from polars import read_ndjson", "$0"]
  },
  "fpo-read-ods": {
    "prefix": "fpo-read-ods",
    "body": ["from polars import read_ods", "$0"]
  },
  "fpo-read-parquet": {
    "prefix": "fpo-read-parquet",
    "body": ["from polars import read_parquet", "$0"]
  },
  "fpo-schema-dict": {
    "prefix": "fpo-schema-dict",
    "body": ["from polars.type_aliases import SchemaDict", "$0"]
  },
  "fpo-series": {
    "prefix": "fpo-series",
    "body": ["from polars import Series", "$0"]
  },
  "fpo-struct": {
    "prefix": "fpo-struct",
    "body": ["from polars import Struct", "$0"]
  },
  "fpo-time": {
    "prefix": "fpo-time",
    "body": ["from polars import Time", "$0"]
  },
  "fpo-uint16": {
    "prefix": "fpo-uint16",
    "body": ["from polars import UInt16", "$0"]
  },
  "fpo-uint32": {
    "prefix": "fpo-uint32",
    "body": ["from polars import UInt32", "$0"]
  },
  "fpo-uint64": {
    "prefix": "fpo-uint64",
    "body": ["from polars import UInt64", "$0"]
  },
  "fpo-uint8": {
    "prefix": "fpo-uint8",
    "body": ["from polars import UInt8", "$0"]
  },
  "fpo-unknown": {
    "prefix": "fpo-unknown",
    "body": ["from polars import Unknown", "$0"]
  },
  "fpo-utf8": {
    "prefix": "fpo-utf8",
    "body": ["from polars import Utf8", "$0"]
  },
  "fpo-when": {
    "prefix": "fpo-when",
    "body": ["from polars import when", "$0"]
  },

  // third party: pprint
  "fpp-isreadable": {
    "prefix": "fpp-isreadable",
    "body": ["from pprint import isreadable", "$0"]
  },
  "fpp-isrecursive": {
    "prefix": "fpp-isrecursive",
    "body": ["from pprint import isrecursive", "$0"]
  },
  "fpp-pformat": {
    "prefix": "fpp-pformat",
    "body": ["from pprint import pformat", "$0"]
  },
  "fpp-pp": { "prefix": "fpp-pp", "body": ["from pprint import pp", "$0"] },
  "fpp-pprint": {
    "prefix": "fpp-pprint",
    "body": ["from pprint import pprint", "$0"]
  },
  "fpp-pretty-printer": {
    "prefix": "fpp-pretty-printer",
    "body": ["from pprint import PrettyPrinter", "$0"]
  },
  "fpp-saferepr": {
    "prefix": "fpp-saferepr",
    "body": ["from pprint import saferepr", "$0"]
  },

  // third party: pydantic
  "fpy-base-model": {
    "prefix": "fpy-base-model",
    "body": ["from pydantic import BaseModel", "$0"]
  },

  // third party: pytest
  "fpy-approx": {
    "prefix": "fpy-approx",
    "body": ["from pytest import approx", "$0"]
  },
  "fpy-fixture": {
    "prefix": "fpy-fixture",
    "body": ["from pytest import fixture", "$0"]
  },
  "fpy-mark": {
    "prefix": "fpy-mark",
    "body": ["from pytest import mark", "$0"]
  },
  "fpy-mark-and-param": {
    "prefix": "fpy-mark-and-param",
    "body": ["from pytest import mark, param", "$0"]
  },
  "fpy-param": {
    "prefix": "fpy-param",
    "body": ["from pytest import param", "$0"]
  },
  "fpy-raises": {
    "prefix": "fpy-raises",
    "body": ["from pytest import raises", "$0"]
  },

  // third party: sqlalchemy
  "fsq-and": {
    "prefix": "fsq-and",
    "body": ["from sqlalchemy import and_", "$0"]
  },
  "fsq-column": {
    "prefix": "fsq-column",
    "body": ["from sqlalchemy import Column", "$0"]
  },
  "fsq-connection": {
    "prefix": "fsq-connection",
    "body": ["from sqlalchemy import Connection", "$0"]
  },
  "fsq-date": {
    "prefix": "fsq-date",
    "body": ["from sqlalchemy import Date", "$0"]
  },
  "fsq-engine": {
    "prefix": "fsq-engine",
    "body": ["from sqlalchemy import Engine", "$0"]
  },
  "fsq-func": {
    "prefix": "fsq-func",
    "body": ["from sqlalchemy import func", "$0"]
  },
  "fsq-or": {
    "prefix": "fsq-or",
    "body": ["from sqlalchemy import or_", "$0"]
  },
  "fsq-select": {
    "prefix": "fsq-select",
    "body": ["from sqlalchemy import select", "$0"]
  },
  "fsq-table": {
    "prefix": "fsq-table",
    "body": ["from sqlalchemy import Table", "$0"]
  },

  // third party: streamlit
  "fst-altair-chart": {
    "prefix": "fst-altair-chart",
    "body": ["from streamlit import altair_chart", "$0"]
  },
  "fst-area-chart": {
    "prefix": "fst-area-chart",
    "body": ["from streamlit import area_chart", "$0"]
  },
  "fst-audio": {
    "prefix": "fst-audio",
    "body": ["from streamlit import audio", "$0"]
  },
  "fst-balloons": {
    "prefix": "fst-balloons",
    "body": ["from streamlit import balloons", "$0"]
  },
  "fst-bar-chart": {
    "prefix": "fst-bar-chart",
    "body": ["from streamlit import bar_chart", "$0"]
  },
  "fst-bokeh-chart": {
    "prefix": "fst-bokeh-chart",
    "body": ["from streamlit import bokeh_chart", "$0"]
  },
  "fst-button": {
    "prefix": "fst-button",
    "body": ["from streamlit import button", "$0"]
  },
  "fst-cache": {
    "prefix": "fst-cache",
    "body": ["from streamlit import cache", "$0"]
  },
  "fst-cache-data": {
    "prefix": "fst-cache-data",
    "body": ["from streamlit import cache_data", "$0"]
  },
  "fst-cache-resource": {
    "prefix": "fst-cache-resource",
    "body": ["from streamlit import cache_resource", "$0"]
  },
  "fst-camera-input": {
    "prefix": "fst-camera-input",
    "body": ["from streamlit import camera_input", "$0"]
  },
  "fst-caption": {
    "prefix": "fst-caption",
    "body": ["from streamlit import caption", "$0"]
  },
  "fst-chat-input": {
    "prefix": "fst-chat-input",
    "body": ["from streamlit import chat_input", "$0"]
  },
  "fst-chat-message": {
    "prefix": "fst-chat-message",
    "body": ["from streamlit import chat_message", "$0"]
  },
  "fst-checkbox": {
    "prefix": "fst-checkbox",
    "body": ["from streamlit import checkbox", "$0"]
  },
  "fst-code": {
    "prefix": "fst-code",
    "body": ["from streamlit import code", "$0"]
  },
  "fst-color-picker": {
    "prefix": "fst-color-picker",
    "body": ["from streamlit import color_picker", "$0"]
  },
  "fst-column-config": {
    "prefix": "fst-column-config",
    "body": ["from streamlit import column_config", "$0"]
  },
  "fst-columns": {
    "prefix": "fst-columns",
    "body": ["from streamlit import columns", "$0"]
  },
  "fst-connection": {
    "prefix": "fst-connection",
    "body": ["from streamlit import connection", "$0"]
  },
  "fst-container": {
    "prefix": "fst-container",
    "body": ["from streamlit import container", "$0"]
  },
  "fst-data-editor": {
    "prefix": "fst-data-editor",
    "body": ["from streamlit import data_editor", "$0"]
  },
  "fst-dataframe": {
    "prefix": "fst-dataframe",
    "body": ["from streamlit import dataframe", "$0"]
  },
  "fst-date-input": {
    "prefix": "fst-date-input",
    "body": ["from streamlit import date_input", "$0"]
  },
  "fst-divider": {
    "prefix": "fst-divider",
    "body": ["from streamlit import divider", "$0"]
  },
  "fst-download-button": {
    "prefix": "fst-download-button",
    "body": ["from streamlit import download_button", "$0"]
  },
  "fst-echo": {
    "prefix": "fst-echo",
    "body": ["from streamlit import echo", "$0"]
  },
  "fst-empty": {
    "prefix": "fst-empty",
    "body": ["from streamlit import empty", "$0"]
  },
  "fst-error": {
    "prefix": "fst-error",
    "body": ["from streamlit import error", "$0"]
  },
  "fst-exception": {
    "prefix": "fst-exception",
    "body": ["from streamlit import exception", "$0"]
  },
  "fst-expander": {
    "prefix": "fst-expander",
    "body": ["from streamlit import expander", "$0"]
  },
  "fst-file-uploader": {
    "prefix": "fst-file-uploader",
    "body": ["from streamlit import file_uploader", "$0"]
  },
  "fst-form": {
    "prefix": "fst-form",
    "body": ["from streamlit import form", "$0"]
  },
  "fst-form-submit-button": {
    "prefix": "fst-form-submit-button",
    "body": ["from streamlit import form_submit_button", "$0"]
  },
  "fst-graphviz-chart": {
    "prefix": "fst-graphviz-chart",
    "body": ["from streamlit import graphviz_chart", "$0"]
  },
  "fst-header": {
    "prefix": "fst-header",
    "body": ["from streamlit import header", "$0"]
  },
  "fst-help": {
    "prefix": "fst-help",
    "body": ["from streamlit import help", "$0"]
  },
  "fst-image": {
    "prefix": "fst-image",
    "body": ["from streamlit import image", "$0"]
  },
  "fst-info": {
    "prefix": "fst-info",
    "body": ["from streamlit import info", "$0"]
  },
  "fst-json": {
    "prefix": "fst-json",
    "body": ["from streamlit import json", "$0"]
  },
  "fst-latex": {
    "prefix": "fst-latex",
    "body": ["from streamlit import latex", "$0"]
  },
  "fst-line-chart": {
    "prefix": "fst-line-chart",
    "body": ["from streamlit import line_chart", "$0"]
  },
  "fst-link-button": {
    "prefix": "fst-link-button",
    "body": ["from streamlit import link_button", "$0"]
  },
  "fst-map": {
    "prefix": "fst-map",
    "body": ["from streamlit import map", "$0"]
  },
  "fst-markdown": {
    "prefix": "fst-markdown",
    "body": ["from streamlit import markdown", "$0"]
  },
  "fst-metric": {
    "prefix": "fst-metric",
    "body": ["from streamlit import metric", "$0"]
  },
  "fst-number-input": {
    "prefix": "fst-number-input",
    "body": ["from streamlit import number_input", "$0"]
  },
  "fst-plotly-chart": {
    "prefix": "fst-plotly-chart",
    "body": ["from streamlit import plotly_chart", "$0"]
  },
  "fst-progress": {
    "prefix": "fst-progress",
    "body": ["from streamlit import progress", "$0"]
  },
  "fst-pydeck-chart": {
    "prefix": "fst-pydeck-chart",
    "body": ["from streamlit import pydeck_chart", "$0"]
  },
  "fst-pyplot": {
    "prefix": "fst-pyplot",
    "body": ["from streamlit import pyplot", "$0"]
  },
  "fst-radio": {
    "prefix": "fst-radio",
    "body": ["from streamlit import radio", "$0"]
  },
  "fst-rerun": {
    "prefix": "fst-rerun",
    "body": ["from streamlit import rerun", "$0"]
  },
  "fst-scatter-chart": {
    "prefix": "fst-scatter-chart",
    "body": ["from streamlit import scatter_chart", "$0"]
  },
  "fst-secrets": {
    "prefix": "fst-secrets",
    "body": ["from streamlit import secrets", "$0"]
  },
  "fst-select-slider": {
    "prefix": "fst-select-slider",
    "body": ["from streamlit import select_slider", "$0"]
  },
  "fst-selectbox": {
    "prefix": "fst-selectbox",
    "body": ["from streamlit import selectbox", "$0"]
  },
  "fst-session-state": {
    "prefix": "fst-session-state",
    "body": ["from streamlit import session_state", "$0"]
  },
  "fst-set-page-config": {
    "prefix": "fst-set-page-config",
    "body": ["from streamlit import set_page_config", "$0"]
  },
  "fst-sidebar": {
    "prefix": "fst-sidebar",
    "body": ["from streamlit import sidebar", "$0"]
  },
  "fst-snow": {
    "prefix": "fst-snow",
    "body": ["from streamlit import snow", "$0"]
  },
  "fst-spinner": {
    "prefix": "fst-spinner",
    "body": ["from streamlit import spinner", "$0"]
  },
  "fst-status": {
    "prefix": "fst-status",
    "body": ["from streamlit import status", "$0"]
  },
  "fst-stop": {
    "prefix": "fst-stop",
    "body": ["from streamlit import stop", "$0"]
  },
  "fst-subheader": {
    "prefix": "fst-subheader",
    "body": ["from streamlit import subheader", "$0"]
  },
  "fst-success": {
    "prefix": "fst-success",
    "body": ["from streamlit import success", "$0"]
  },
  "fst-table": {
    "prefix": "fst-table",
    "body": ["from streamlit import table", "$0"]
  },
  "fst-tabs": {
    "prefix": "fst-tabs",
    "body": ["from streamlit import tabs", "$0"]
  },
  "fst-text": {
    "prefix": "fst-text",
    "body": ["from streamlit import text", "$0"]
  },
  "fst-text-area": {
    "prefix": "fst-text-area",
    "body": ["from streamlit import text_area", "$0"]
  },
  "fst-text-input": {
    "prefix": "fst-text-input",
    "body": ["from streamlit import text_input", "$0"]
  },
  "fst-time-input": {
    "prefix": "fst-time-input",
    "body": ["from streamlit import time_input", "$0"]
  },
  "fst-title": {
    "prefix": "fst-title",
    "body": ["from streamlit import title", "$0"]
  },
  "fst-toast": {
    "prefix": "fst-toast",
    "body": ["from streamlit import toast", "$0"]
  },
  "fst-toggle": {
    "prefix": "fst-toggle",
    "body": ["from streamlit import toggle", "$0"]
  },
  "fst-vega-lite-chart": {
    "prefix": "fst-vega-lite-chart",
    "body": ["from streamlit import vega_lite_chart", "$0"]
  },
  "fst-video": {
    "prefix": "fst-video",
    "body": ["from streamlit import video", "$0"]
  },
  "fst-write": {
    "prefix": "fst-write",
    "body": ["from streamlit import write", "$0"]
  },

  // third party: tabulate
  "fta-tabulate": {
    "prefix": "fta-tabulate",
    "body": ["from tabulate import tabulate", "$0"]
  },

  // third party: typed-settings
  "fty-settings": {
    "prefix": "fty-settings",
    "body": ["from typed_settings import settings", "$0"]
  },

  // third party: typing-extensions
  "ftye-assert-never": {
    "prefix": "ftye-assert-never",
    "body": ["from typing_extensions import assert_never", "$0"]
  },
  "ftye-assert-type": {
    "prefix": "ftye-assert-type",
    "body": ["from typing_extensions import assert_type", "$0"]
  },
  "ftye-clear-overloads": {
    "prefix": "ftye-clear-overloads",
    "body": ["from typing_extensions import clear_overloads", "$0"]
  },
  "ftye-dataclass-transform": {
    "prefix": "ftye-dataclass-transform",
    "body": ["from typing_extensions import dataclass_transform", "$0"]
  },
  "ftye-doc": {
    "prefix": "ftye-doc",
    "body": ["from typing_extensions import Doc", "$0"]
  },
  "ftye-get-original-bases": {
    "prefix": "ftye-get-original-bases",
    "body": ["from typing_extensions import get_original_bases", "$0"]
  },
  "ftye-get-overloads": {
    "prefix": "ftye-get-overloads",
    "body": ["from typing_extensions import get_overloads", "$0"]
  },
  "ftye-get-protocol-members": {
    "prefix": "ftye-get-protocol-members",
    "body": ["from typing_extensions import get_protocol_members", "$0"]
  },
  "ftye-literal-string": {
    "prefix": "ftye-literal-string",
    "body": ["from typing_extensions import LiteralString", "$0"]
  },
  "ftye-named-tuple": {
    "prefix": "ftye-named-tuple",
    "body": ["from typing_extensions import NamedTuple", "$0"]
  },
  "ftye-never": {
    "prefix": "ftye-never",
    "body": ["from typing_extensions import Never", "$0"]
  },
  "ftye-not-required": {
    "prefix": "ftye-not-required",
    "body": ["from typing_extensions import NotRequired", "$0"]
  },
  "ftye-overload": {
    "prefix": "ftye-overload",
    "body": ["from typing_extensions import overload", "$0"]
  },
  "ftye-override": {
    "prefix": "ftye-override",
    "body": ["from typing_extensions import override", "$0"]
  },
  "ftye-required": {
    "prefix": "ftye-required",
    "body": ["from typing_extensions import Required", "$0"]
  },
  "ftye-reveal-type": {
    "prefix": "ftye-reveal-type",
    "body": ["from typing_extensions import reveal_type", "$0"]
  },
  "ftye-self": {
    "prefix": "ftye-self",
    "body": ["from typing_extensions import Self", "$0"]
  },
  "ftye-type-alias-type": {
    "prefix": "ftye-type-alias-type",
    "body": ["from typing_extensions import TypeAliasType", "$0"]
  },
  "ftye-type-var-tuple": {
    "prefix": "ftye-type-var-tuple",
    "body": ["from typing_extensions import TypeVarTuple", "$0"]
  },
  "ftye-unpack": {
    "prefix": "ftye-unpack",
    "body": ["from typing_extensions import Unpack", "$0"]
  },

  // third party: (dycw-)utilities.airium
  "fut-yield-airium": {
    "prefix": "fut-yield-airium",
    "body": ["from utilities.airium import yield_airium", "$0"]
  },

  // third party: (dycw-)utilities.atomicwrites
  "fut-directory-exists-error": {
    "prefix": "fut-directory-exists-error",
    "body": ["from utilities.atomicwrites import DirectoryExistsError", "$0"]
  },
  "fut-writer": {
    "prefix": "fut-writer",
    "body": ["from utilities.atomicwrites import writer", "$0"]
  },
  "fut-writer-error": {
    "prefix": "fut-writer-error",
    "body": ["from utilities.atomicwrites import WriterError", "$0"]
  },

  // third party: (dycw-)utilities.beartype
  "fut-beartype-if-dev": {
    "prefix": "fut-beartype-if-dev",
    "body": ["from utilities.beartype import beartype_if_dev", "$0"]
  },

  // third party: (dycw-)utilities.cryptography
  "fut-decrypt": {
    "prefix": "fut-decrypt",
    "body": ["from utilities.cryptography import decrypt", "$0"]
  },
  "fut-encrypt": {
    "prefix": "fut-encrypt",
    "body": ["from utilities.cryptography import encrypt", "$0"]
  },
  "fut-get-fernet": {
    "prefix": "fut-get-fernet",
    "body": ["from utilities.cryptography import get_fernet", "$0"]
  },
  "fut-get-fernet-error": {
    "prefix": "fut-get-fernet-error",
    "body": ["from utilities.cryptography import GetFernetError", "$0"]
  },

  // third party: (dycw-)utilities.datetime
  "fut-add-weekdays": {
    "prefix": "fut-add-weekdays",
    "body": ["from utilities.datetime import add_weekdays", "$0"]
  },
  "fut-add-weekdays-error": {
    "prefix": "fut-add-weekdays-error",
    "body": ["from utilities.datetime import AddWeekdaysError", "$0"]
  },
  "fut-date-to-datetime": {
    "prefix": "fut-date-to-datetime",
    "body": ["from utilities.datetime import date_to_datetime", "$0"]
  },
  "fut-duration-to-float": {
    "prefix": "fut-duration-to-float",
    "body": ["from utilities.datetime import duration_to_float", "$0"]
  },
  "fut-duration-to-timedelta": {
    "prefix": "fut-duration-to-timedelta",
    "body": ["from utilities.datetime import duration_to_timedelta", "$0"]
  },
  "fut-ensure-date": {
    "prefix": "fut-ensure-date",
    "body": ["from utilities.datetime import ensure_date", "$0"]
  },
  "fut-ensure-datetime": {
    "prefix": "fut-ensure-datetime",
    "body": ["from utilities.datetime import ensure_datetime", "$0"]
  },
  "fut-ensure-time": {
    "prefix": "fut-ensure-time",
    "body": ["from utilities.datetime import ensure_time", "$0"]
  },
  "fut-ensure-timedelta": {
    "prefix": "fut-ensure-timedelta",
    "body": ["from utilities.datetime import ensure_timedelta", "$0"]
  },
  "fut-epoch-utc": {
    "prefix": "fut-epoch-utc",
    "body": ["from utilities.datetime import EPOCH_UTC", "$0"]
  },
  "fut-get-now": {
    "prefix": "fut-get-now",
    "body": ["from utilities.datetime import get_now", "$0"]
  },
  "fut-get-today": {
    "prefix": "fut-get-today",
    "body": ["from utilities.datetime import get_today", "$0"]
  },
  "fut-is-weekday": {
    "prefix": "fut-is-weekday",
    "body": ["from utilities.datetime import is_weekday", "$0"]
  },
  "fut-local-time-zone-error": {
    "prefix": "fut-local-time-zone-error",
    "body": ["from utilities.datetime import LocalTimeZoneError", "$0"]
  },
  "fut-local-timezone": {
    "prefix": "fut-local-timezone",
    "body": ["from utilities.datetime import local_timezone", "$0"]
  },
  "fut-maybe-sub-pct-y": {
    "prefix": "fut-maybe-sub-pct-y",
    "body": ["from utilities.datetime import maybe_sub_pct_y", "$0"]
  },
  "fut-now-hkg": {
    "prefix": "fut-now-hkg",
    "body": ["from utilities.datetime import NOW_HKG", "$0"]
  },
  "fut-now-tky": {
    "prefix": "fut-now-tky",
    "body": ["from utilities.datetime import NOW_TKY", "$0"]
  },
  "fut-now-utc": {
    "prefix": "fut-now-utc",
    "body": ["from utilities.datetime import NOW_UTC", "$0"]
  },
  "fut-parse-date": {
    "prefix": "fut-parse-date",
    "body": ["from utilities.datetime import parse_date", "$0"]
  },
  "fut-parse-date-error": {
    "prefix": "fut-parse-date-error",
    "body": ["from utilities.datetime import ParseDateError", "$0"]
  },
  "fut-parse-date-time-error": {
    "prefix": "fut-parse-date-time-error",
    "body": ["from utilities.datetime import ParseDateTimeError", "$0"]
  },
  "fut-parse-datetime": {
    "prefix": "fut-parse-datetime",
    "body": ["from utilities.datetime import parse_datetime", "$0"]
  },
  "fut-parse-time": {
    "prefix": "fut-parse-time",
    "body": ["from utilities.datetime import parse_time", "$0"]
  },
  "fut-parse-time-error": {
    "prefix": "fut-parse-time-error",
    "body": ["from utilities.datetime import ParseTimeError", "$0"]
  },
  "fut-parse-timedelta": {
    "prefix": "fut-parse-timedelta",
    "body": ["from utilities.datetime import parse_timedelta", "$0"]
  },
  "fut-parse-timedelta-error": {
    "prefix": "fut-parse-timedelta-error",
    "body": ["from utilities.datetime import ParseTimedeltaError", "$0"]
  },
  "fut-round-to-next-weekday": {
    "prefix": "fut-round-to-next-weekday",
    "body": ["from utilities.datetime import round_to_next_weekday", "$0"]
  },
  "fut-round-to-prev-weekday": {
    "prefix": "fut-round-to-prev-weekday",
    "body": ["from utilities.datetime import round_to_prev_weekday", "$0"]
  },
  "fut-serialize-date": {
    "prefix": "fut-serialize-date",
    "body": ["from utilities.datetime import serialize_date", "$0"]
  },
  "fut-serialize-datetime": {
    "prefix": "fut-serialize-datetime",
    "body": ["from utilities.datetime import serialize_datetime", "$0"]
  },
  "fut-serialize-time": {
    "prefix": "fut-serialize-time",
    "body": ["from utilities.datetime import serialize_time", "$0"]
  },
  "fut-serialize-timedelta": {
    "prefix": "fut-serialize-timedelta",
    "body": ["from utilities.datetime import serialize_timedelta", "$0"]
  },
  "fut-today-hkg": {
    "prefix": "fut-today-hkg",
    "body": ["from utilities.datetime import TODAY_HKG", "$0"]
  },
  "fut-today-tky": {
    "prefix": "fut-today-tky",
    "body": ["from utilities.datetime import TODAY_TKY", "$0"]
  },
  "fut-today-utc": {
    "prefix": "fut-today-utc",
    "body": ["from utilities.datetime import TODAY_UTC", "$0"]
  },
  "fut-utc": {
    "prefix": "fut-utc",
    "body": ["from utilities.datetime import UTC", "$0"]
  },
  "fut-yield-weekdays": {
    "prefix": "fut-yield-weekdays",
    "body": ["from utilities.datetime import yield_weekdays", "$0"]
  },
  "fut-yield-weekdays-error": {
    "prefix": "fut-yield-weekdays-error",
    "body": ["from utilities.datetime import YieldWeekdaysError", "$0"]
  },

  // third party: (dycw-)utilities.enum
  "fut-ensure-enum": {
    "prefix": "fut-ensure-enum",
    "body": ["from utilities.enum import ensure_enum", "$0"]
  },
  "fut-parse-enum": {
    "prefix": "fut-parse-enum",
    "body": ["from utilities.enum import parse_enum", "$0"]
  },
  "fut-parse-enum-error": {
    "prefix": "fut-parse-enum-error",
    "body": ["from utilities.enum import ParseEnumError", "$0"]
  },
  "fut-str-enum": {
    "prefix": "fut-str-enum",
    "body": ["from utilities.enum import StrEnum", "$0"]
  },

  // third party: (dycw-)utilities.errors
  "fut-redirect-error": {
    "prefix": "fut-redirect-error",
    "body": ["from utilities.errors import redirect_error", "$0"]
  },
  "fut-redirect-error-error": {
    "prefix": "fut-redirect-error-error",
    "body": ["from utilities.errors import RedirectErrorError", "$0"]
  },
  "fut-retry": {
    "prefix": "fut-retry",
    "body": ["from utilities.errors import retry", "$0"]
  },

  // third party: (dycw-)utilities.functools
  "fut-partial": {
    "prefix": "fut-partial",
    "body": ["from utilities.functools import partial", "$0"]
  },

  // third party: (dycw-)utilities.getpass
  "fut-user": {
    "prefix": "fut-user",
    "body": ["from utilities.getpass import USER", "$0"]
  },

  // third party: (dycw-)utilities.git
  "fut-get-branch-name": {
    "prefix": "fut-get-branch-name",
    "body": ["from utilities.git import get_branch_name", "$0"]
  },
  "fut-get-repo-name": {
    "prefix": "fut-get-repo-name",
    "body": ["from utilities.git import get_repo_name", "$0"]
  },
  "fut-get-repo-root": {
    "prefix": "fut-get-repo-root",
    "body": ["from utilities.git import get_repo_root", "$0"]
  },
  "fut-get-repo-root-error": {
    "prefix": "fut-get-repo-root-error",
    "body": ["from utilities.git import GetRepoRootError", "$0"]
  },
  "fut-get-repo-root-or-cwd-sub-path": {
    "prefix": "fut-get-repo-root-or-cwd-sub-path",
    "body": ["from utilities.git import get_repo_root_or_cwd_sub_path", "$0"]
  },
  "fut-valid-path-repo": {
    "prefix": "fut-valid-path-repo",
    "body": ["from utilities.git import valid_path_repo", "$0"]
  },

  // third party: (dycw-)utilities.hashlib
  "fut-md5-hash": {
    "prefix": "fut-md5-hash",
    "body": ["from utilities.hashlib import md5_hash", "$0"]
  },

  // third party: (dycw-)utilities.humps
  "fut-snake-case": {
    "prefix": "fut-snake-case",
    "body": ["from utilities.humps import snake_case", "$0"]
  },
  "fut-snake-case-mappings": {
    "prefix": "fut-snake-case-mappings",
    "body": ["from utilities.humps import snake_case_mappings", "$0"]
  },
  "fut-snake-case-mappings-error": {
    "prefix": "fut-snake-case-mappings-error",
    "body": ["from utilities.humps import SnakeCaseMappingsError", "$0"]
  },

  // third party: (dycw-)utilities.iterables
  "fut-check-duplicates": {
    "prefix": "fut-check-duplicates",
    "body": ["from utilities.iterables import check_duplicates", "$0"]
  },
  "fut-check-duplicates-error": {
    "prefix": "fut-check-duplicates-error",
    "body": ["from utilities.iterables import CheckDuplicatesError", "$0"]
  },
  "fut-ensure-hashables": {
    "prefix": "fut-ensure-hashables",
    "body": ["from utilities.iterables import ensure_hashables", "$0"]
  },
  "fut-is-iterable-not-str": {
    "prefix": "fut-is-iterable-not-str",
    "body": ["from utilities.iterables import is_iterable_not_str", "$0"]
  },

  // third party: (dycw-)utilities.json
  "fut-deserialize": {
    "prefix": "fut-deserialize",
    "body": ["from utilities.json import deserialize", "$0"]
  },
  "fut-serialize": {
    "prefix": "fut-serialize",
    "body": ["from utilities.json import serialize", "$0"]
  },

  // third party: (dycw-)utilities.logging
  "fut-basic-config": {
    "prefix": "fut-basic-config",
    "body": ["from utilities.logging import basic_config", "$0"]
  },
  "fut-log-level": {
    "prefix": "fut-log-level",
    "body": ["from utilities.logging import LogLevel", "$0"]
  },

  // third party: (dycw-)utilities.luigi
  "fut-annotation-and-keywords-to-dict": {
    "prefix": "fut-annotation-and-keywords-to-dict",
    "body": [
      "from utilities.luigi import annotation_and_keywords_to_dict",
      "$0"
    ]
  },
  "fut-annotation-and-keywords-to-dict-error": {
    "prefix": "fut-annotation-and-keywords-to-dict-error",
    "body": [
      "from utilities.luigi import AnnotationAndKeywordsToDictError",
      "$0"
    ]
  },
  "fut-annotation-date-to-class": {
    "prefix": "fut-annotation-date-to-class",
    "body": ["from utilities.luigi import annotation_date_to_class", "$0"]
  },
  "fut-annotation-datetime-to-class": {
    "prefix": "fut-annotation-datetime-to-class",
    "body": ["from utilities.luigi import annotation_datetime_to_class", "$0"]
  },
  "fut-annotation-iterable-to-class": {
    "prefix": "fut-annotation-iterable-to-class",
    "body": ["from utilities.luigi import annotation_iterable_to_class", "$0"]
  },
  "fut-annotation-iterable-to-class-error": {
    "prefix": "fut-annotation-iterable-to-class-error",
    "body": ["from utilities.luigi import AnnotationIterableToClassError", "$0"]
  },
  "fut-annotation-to-class": {
    "prefix": "fut-annotation-to-class",
    "body": ["from utilities.luigi import annotation_to_class", "$0"]
  },
  "fut-annotation-to-class-error": {
    "prefix": "fut-annotation-to-class-error",
    "body": ["from utilities.luigi import AnnotationToClassError", "$0"]
  },
  "fut-annotation-union-to-class": {
    "prefix": "fut-annotation-union-to-class",
    "body": ["from utilities.luigi import annotation_union_to_class", "$0"]
  },
  "fut-await-task": {
    "prefix": "fut-await-task",
    "body": ["from utilities.luigi import AwaitTask", "$0"]
  },
  "fut-await-time": {
    "prefix": "fut-await-time",
    "body": ["from utilities.luigi import AwaitTime", "$0"]
  },
  "fut-build": {
    "prefix": "fut-build",
    "body": ["from utilities.luigi import build", "$0"]
  },
  "fut-build-params-mixin": {
    "prefix": "fut-build-params-mixin",
    "body": ["from utilities.luigi import build_params_mixin", "$0"]
  },
  "fut-clone": {
    "prefix": "fut-clone",
    "body": ["from utilities.luigi import clone", "$0"]
  },
  "fut-database-target": {
    "prefix": "fut-database-target",
    "body": ["from utilities.luigi import DatabaseTarget", "$0"]
  },
  "fut-date-hour-parameter": {
    "prefix": "fut-date-hour-parameter",
    "body": ["from utilities.luigi import DateHourParameter", "$0"]
  },
  "fut-date-minute-parameter": {
    "prefix": "fut-date-minute-parameter",
    "body": ["from utilities.luigi import DateMinuteParameter", "$0"]
  },
  "fut-date-parameter": {
    "prefix": "fut-date-parameter",
    "body": ["from utilities.luigi import DateParameter", "$0"]
  },
  "fut-date-second-parameter": {
    "prefix": "fut-date-second-parameter",
    "body": ["from utilities.luigi import DateSecondParameter", "$0"]
  },
  "fut-engine-parameter": {
    "prefix": "fut-engine-parameter",
    "body": ["from utilities.luigi import EngineParameter", "$0"]
  },
  "fut-enum-parameter": {
    "prefix": "fut-enum-parameter",
    "body": ["from utilities.luigi import EnumParameter", "$0"]
  },
  "fut-external-file": {
    "prefix": "fut-external-file",
    "body": ["from utilities.luigi import ExternalFile", "$0"]
  },
  "fut-external-task": {
    "prefix": "fut-external-task",
    "body": ["from utilities.luigi import ExternalTask", "$0"]
  },
  "fut-frozen-set-strs-parameter": {
    "prefix": "fut-frozen-set-strs-parameter",
    "body": ["from utilities.luigi import FrozenSetStrsParameter", "$0"]
  },
  "fut-path-target": {
    "prefix": "fut-path-target",
    "body": ["from utilities.luigi import PathTarget", "$0"]
  },
  "fut-table-parameter": {
    "prefix": "fut-table-parameter",
    "body": ["from utilities.luigi import TableParameter", "$0"]
  },
  "fut-time-parameter": {
    "prefix": "fut-time-parameter",
    "body": ["from utilities.luigi import TimeParameter", "$0"]
  },
  "fut-version-parameter": {
    "prefix": "fut-version-parameter",
    "body": ["from utilities.luigi import VersionParameter", "$0"]
  },
  "fut-weekday-parameter": {
    "prefix": "fut-weekday-parameter",
    "body": ["from utilities.luigi import WeekdayParameter", "$0"]
  },

  // third party: (dycw-)utilities.more_itertools
  "fut-one": {
    "prefix": "fut-one",
    "body": ["from utilities.more_itertools import one", "$0"]
  },
  "fut-one-empty-error": {
    "prefix": "fut-one-empty-error",
    "body": ["from utilities.more_itertools import OneEmptyError", "$0"]
  },
  "fut-one-error": {
    "prefix": "fut-one-error",
    "body": ["from utilities.more_itertools import OneError", "$0"]
  },
  "fut-one-non-unique-error": {
    "prefix": "fut-one-non-unique-error",
    "body": ["from utilities.more_itertools import OneNonUniqueError", "$0"]
  },

  // third party: (dycw-)utilities.os
  "fut-cpu-count": {
    "prefix": "fut-cpu-count",
    "body": ["from utilities.os import CPU_COUNT", "$0"]
  },
  "fut-get-cpu-count": {
    "prefix": "fut-get-cpu-count",
    "body": ["from utilities.os import get_cpu_count", "$0"]
  },
  "fut-get-cpu-count-error": {
    "prefix": "fut-get-cpu-count-error",
    "body": ["from utilities.os import GetCPUCountError", "$0"]
  },
  "fut-temp-environ": {
    "prefix": "fut-temp-environ",
    "body": ["from utilities.os import temp_environ", "$0"]
  },

  // third party: (dycw-)utilities.pandas
  "fut-astype": {
    "prefix": "fut-astype",
    "body": ["from utilities.pandas import astype", "$0"]
  },
  "fut-boolean": {
    "prefix": "fut-boolean",
    "body": ["from utilities.pandas import boolean", "$0"]
  },
  "fut-category": {
    "prefix": "fut-category",
    "body": ["from utilities.pandas import category", "$0"]
  },
  "fut-check-index": {
    "prefix": "fut-check-index",
    "body": ["from utilities.pandas import check_index", "$0"]
  },
  "fut-check-index-error": {
    "prefix": "fut-check-index-error",
    "body": ["from utilities.pandas import CheckIndexError", "$0"]
  },
  "fut-check-pandas-data-frame-error": {
    "prefix": "fut-check-pandas-data-frame-error",
    "body": ["from utilities.pandas import CheckPandasDataFrameError", "$0"]
  },
  "fut-check-pandas-dataframe": {
    "prefix": "fut-check-pandas-dataframe",
    "body": ["from utilities.pandas import check_pandas_dataframe", "$0"]
  },
  "fut-check-range-index": {
    "prefix": "fut-check-range-index",
    "body": ["from utilities.pandas import check_range_index", "$0"]
  },
  "fut-check-range-index-error": {
    "prefix": "fut-check-range-index-error",
    "body": ["from utilities.pandas import CheckRangeIndexError", "$0"]
  },
  "fut-datetime64nshk": {
    "prefix": "fut-datetime64nshk",
    "body": ["from utilities.pandas import datetime64nshk", "$0"]
  },
  "fut-datetime64nsutc": {
    "prefix": "fut-datetime64nsutc",
    "body": ["from utilities.pandas import datetime64nsutc", "$0"]
  },
  "fut-empty-pandas-concat-error": {
    "prefix": "fut-empty-pandas-concat-error",
    "body": ["from utilities.pandas import EmptyPandasConcatError", "$0"]
  },
  "fut-int64": {
    "prefix": "fut-int64",
    "body": ["from utilities.pandas import Int64", "$0"]
  },
  "fut-redirect-empty-pandas-concat": {
    "prefix": "fut-redirect-empty-pandas-concat",
    "body": ["from utilities.pandas import redirect_empty_pandas_concat", "$0"]
  },
  "fut-rename-index": {
    "prefix": "fut-rename-index",
    "body": ["from utilities.pandas import rename_index", "$0"]
  },
  "fut-series-max": {
    "prefix": "fut-series-max",
    "body": ["from utilities.pandas import series_max", "$0"]
  },
  "fut-series-min": {
    "prefix": "fut-series-min",
    "body": ["from utilities.pandas import series_min", "$0"]
  },
  "fut-series-min-max-error": {
    "prefix": "fut-series-min-max-error",
    "body": ["from utilities.pandas import SeriesMinMaxError", "$0"]
  },
  "fut-sort-index": {
    "prefix": "fut-sort-index",
    "body": ["from utilities.pandas import sort_index", "$0"]
  },
  "fut-string": {
    "prefix": "fut-string",
    "body": ["from utilities.pandas import string", "$0"]
  },
  "fut-timestamp-max-as-date": {
    "prefix": "fut-timestamp-max-as-date",
    "body": ["from utilities.pandas import TIMESTAMP_MAX_AS_DATE", "$0"]
  },
  "fut-timestamp-max-as-datetime": {
    "prefix": "fut-timestamp-max-as-datetime",
    "body": ["from utilities.pandas import TIMESTAMP_MAX_AS_DATETIME", "$0"]
  },
  "fut-timestamp-min-as-date": {
    "prefix": "fut-timestamp-min-as-date",
    "body": ["from utilities.pandas import TIMESTAMP_MIN_AS_DATE", "$0"]
  },
  "fut-timestamp-min-as-datetime": {
    "prefix": "fut-timestamp-min-as-datetime",
    "body": ["from utilities.pandas import TIMESTAMP_MIN_AS_DATETIME", "$0"]
  },
  "fut-timestamp-to-date": {
    "prefix": "fut-timestamp-to-date",
    "body": ["from utilities.pandas import timestamp_to_date", "$0"]
  },
  "fut-timestamp-to-date-time-error": {
    "prefix": "fut-timestamp-to-date-time-error",
    "body": ["from utilities.pandas import TimestampToDateTimeError", "$0"]
  },
  "fut-timestamp-to-datetime": {
    "prefix": "fut-timestamp-to-datetime",
    "body": ["from utilities.pandas import timestamp_to_datetime", "$0"]
  },
  "fut-to-numpy": {
    "prefix": "fut-to-numpy",
    "body": ["from utilities.pandas import to_numpy", "$0"]
  },

  // third party: (dycw-)utilities.pathlib
  "fut-ensure-suffix": {
    "prefix": "fut-ensure-suffix",
    "body": ["from utilities.pathlib import ensure_suffix", "$0"]
  },
  "fut-temp-cwd": {
    "prefix": "fut-temp-cwd",
    "body": ["from utilities.pathlib import temp_cwd", "$0"]
  },
  "fut-walk": {
    "prefix": "fut-walk",
    "body": ["from utilities.pathlib import walk", "$0"]
  },

  // third party: (dycw-)utilities.pathvalidate
  "fut-valid-path": {
    "prefix": "fut-valid-path",
    "body": ["from utilities.pathvalidate import valid_path", "$0"]
  },
  "fut-valid-path-cwd": {
    "prefix": "fut-valid-path-cwd",
    "body": ["from utilities.pathvalidate import valid_path_cwd", "$0"]
  },
  "fut-valid-path-home": {
    "prefix": "fut-valid-path-home",
    "body": ["from utilities.pathvalidate import valid_path_home", "$0"]
  },

  // third party: (dycw-)utilities.pickle
  "fut-read-pickle": {
    "prefix": "fut-read-pickle",
    "body": ["from utilities.pickle import read_pickle", "$0"]
  },
  "fut-write-pickle": {
    "prefix": "fut-write-pickle",
    "body": ["from utilities.pickle import write_pickle", "$0"]
  },

  // third party: (dycw-)utilities.polars
  "fut-check-polars-data-frame-error": {
    "prefix": "fut-check-polars-data-frame-error",
    "body": ["from utilities.polars import CheckPolarsDataFrameError", "$0"]
  },
  "fut-check-polars-dataframe": {
    "prefix": "fut-check-polars-dataframe",
    "body": ["from utilities.polars import check_polars_dataframe", "$0"]
  },
  "fut-join": {
    "prefix": "fut-join",
    "body": ["from utilities.polars import join", "$0"]
  },
  "fut-set-first-row-as-columns": {
    "prefix": "fut-set-first-row-as-columns",
    "body": ["from utilities.polars import set_first_row_as_columns", "$0"]
  },
  "fut-set-first-row-as-columns-error": {
    "prefix": "fut-set-first-row-as-columns-error",
    "body": ["from utilities.polars import SetFirstRowAsColumnsError", "$0"]
  },
  "fut-table-tag-to-data-frame-error": {
    "prefix": "fut-table-tag-to-data-frame-error",
    "body": ["from utilities.polars import TableTagToDataFrameError", "$0"]
  },
  "fut-table-tag-to-dataframe": {
    "prefix": "fut-table-tag-to-dataframe",
    "body": ["from utilities.polars import table_tag_to_dataframe", "$0"]
  },
  "fut-yield-tables": {
    "prefix": "fut-yield-tables",
    "body": ["from utilities.polars import yield_tables", "$0"]
  },

  // third party: (dycw-)utilities.re
  "fut-extract-group": {
    "prefix": "fut-extract-group",
    "body": ["from utilities.re import extract_group", "$0"]
  },
  "fut-extract-group-error": {
    "prefix": "fut-extract-group-error",
    "body": ["from utilities.re import ExtractGroupError", "$0"]
  },
  "fut-extract-groups": {
    "prefix": "fut-extract-groups",
    "body": ["from utilities.re import extract_groups", "$0"]
  },
  "fut-extract-groups-error": {
    "prefix": "fut-extract-groups-error",
    "body": ["from utilities.re import ExtractGroupsError", "$0"]
  },

  // third party: (dycw-)utilities.sentinel
  "fut-sentinel": {
    "prefix": "fut-sentinel",
    "body": ["from utilities.sentinel import sentinel", "$0"]
  },

  // third party: (dycw-)utilities.sys
  "fut-version-major-minor": {
    "prefix": "fut-version-major-minor",
    "body": ["from utilities.sys import VERSION_MAJOR_MINOR", "$0"]
  },
  "fut-is-pytest": {
    "prefix": "fut-is-pytest",
    "body": ["from utilities.sys import is_pytest", "$0"]
  },

  // third party: (dycw-)utilities.sqlalchemy
  "fut-check-engine": {
    "prefix": "fut-check-engine",
    "body": ["from utilities.sqlalchemy import check_engine", "$0"]
  },
  "fut-check-engine-error": {
    "prefix": "fut-check-engine-error",
    "body": ["from utilities.sqlalchemy import CheckEngineError", "$0"]
  },
  "fut-check-table-against-reflection": {
    "prefix": "fut-check-table-against-reflection",
    "body": [
      "from utilities.sqlalchemy import check_table_against_reflection",
      "$0"
    ]
  },
  "fut-chunk-size-frac": {
    "prefix": "fut-chunk-size-frac",
    "body": ["from utilities.sqlalchemy import CHUNK_SIZE_FRAC", "$0"]
  },
  "fut-columnwise-max": {
    "prefix": "fut-columnwise-max",
    "body": ["from utilities.sqlalchemy import columnwise_max", "$0"]
  },
  "fut-columnwise-min": {
    "prefix": "fut-columnwise-min",
    "body": ["from utilities.sqlalchemy import columnwise_min", "$0"]
  },
  "fut-create-engine": {
    "prefix": "fut-create-engine",
    "body": ["from utilities.sqlalchemy import create_engine", "$0"]
  },
  "fut-dialect": {
    "prefix": "fut-dialect",
    "body": ["from utilities.sqlalchemy import Dialect", "$0"]
  },
  "fut-ensure-engine": {
    "prefix": "fut-ensure-engine",
    "body": ["from utilities.sqlalchemy import ensure_engine", "$0"]
  },
  "fut-ensure-tables-created": {
    "prefix": "fut-ensure-tables-created",
    "body": ["from utilities.sqlalchemy import ensure_tables_created", "$0"]
  },
  "fut-ensure-tables-dropped": {
    "prefix": "fut-ensure-tables-dropped",
    "body": ["from utilities.sqlalchemy import ensure_tables_dropped", "$0"]
  },
  "fut-get-chunk-size": {
    "prefix": "fut-get-chunk-size",
    "body": ["from utilities.sqlalchemy import get_chunk_size", "$0"]
  },
  "fut-get-column-names": {
    "prefix": "fut-get-column-names",
    "body": ["from utilities.sqlalchemy import get_column_names", "$0"]
  },
  "fut-get-columns": {
    "prefix": "fut-get-columns",
    "body": ["from utilities.sqlalchemy import get_columns", "$0"]
  },
  "fut-get-dialect": {
    "prefix": "fut-get-dialect",
    "body": ["from utilities.sqlalchemy import get_dialect", "$0"]
  },
  "fut-get-dialect-error": {
    "prefix": "fut-get-dialect-error",
    "body": ["from utilities.sqlalchemy import GetDialectError", "$0"]
  },
  "fut-get-table": {
    "prefix": "fut-get-table",
    "body": ["from utilities.sqlalchemy import get_table", "$0"]
  },
  "fut-get-table-error": {
    "prefix": "fut-get-table-error",
    "body": ["from utilities.sqlalchemy import GetTableError", "$0"]
  },
  "fut-get-table-name": {
    "prefix": "fut-get-table-name",
    "body": ["from utilities.sqlalchemy import get_table_name", "$0"]
  },
  "fut-insert-data-frame-error": {
    "prefix": "fut-insert-data-frame-error",
    "body": ["from utilities.sqlalchemy import InsertDataFrameError", "$0"]
  },
  "fut-insert-dataframe": {
    "prefix": "fut-insert-dataframe",
    "body": ["from utilities.sqlalchemy import insert_dataframe", "$0"]
  },
  "fut-insert-items": {
    "prefix": "fut-insert-items",
    "body": ["from utilities.sqlalchemy import insert_items", "$0"]
  },
  "fut-is-mapped-class": {
    "prefix": "fut-is-mapped-class",
    "body": ["from utilities.sqlalchemy import is_mapped_class", "$0"]
  },
  "fut-is-table-or-mapped-class": {
    "prefix": "fut-is-table-or-mapped-class",
    "body": ["from utilities.sqlalchemy import is_table_or_mapped_class", "$0"]
  },
  "fut-mapped-class-to-dict": {
    "prefix": "fut-mapped-class-to-dict",
    "body": ["from utilities.sqlalchemy import mapped_class_to_dict", "$0"]
  },
  "fut-next-from-sequence": {
    "prefix": "fut-next-from-sequence",
    "body": ["from utilities.sqlalchemy import next_from_sequence", "$0"]
  },
  "fut-next-from-sequence-error": {
    "prefix": "fut-next-from-sequence-error",
    "body": ["from utilities.sqlalchemy import NextFromSequenceError", "$0"]
  },
  "fut-parse-engine": {
    "prefix": "fut-parse-engine",
    "body": ["from utilities.sqlalchemy import parse_engine", "$0"]
  },
  "fut-parse-engine-error": {
    "prefix": "fut-parse-engine-error",
    "body": ["from utilities.sqlalchemy import ParseEngineError", "$0"]
  },
  "fut-redirect-next-from-sequence-error": {
    "prefix": "fut-redirect-next-from-sequence-error",
    "body": [
      "from utilities.sqlalchemy import redirect_next_from_sequence_error",
      "$0"
    ]
  },
  "fut-redirect-table-does-not-exist": {
    "prefix": "fut-redirect-table-does-not-exist",
    "body": [
      "from utilities.sqlalchemy import redirect_table_does_not_exist",
      "$0"
    ]
  },
  "fut-select-to-dataframe": {
    "prefix": "fut-select-to-dataframe",
    "body": ["from utilities.sqlalchemy import select_to_dataframe", "$0"]
  },
  "fut-serialize-engine": {
    "prefix": "fut-serialize-engine",
    "body": ["from utilities.sqlalchemy import serialize_engine", "$0"]
  },
  "fut-tablename-mixin": {
    "prefix": "fut-tablename-mixin",
    "body": ["from utilities.sqlalchemy import TablenameMixin", "$0"]
  },

  // third party: (dycw-)utilities.tempfile
  "fut-gettempdir": {
    "prefix": "fut-gettempdir",
    "body": ["from utilities.tempfile import gettempdir", "$0"]
  },
  "fut-temp-dir": {
    "prefix": "fut-temp-dir",
    "body": ["from utilities.tempfile import TEMP_DIR", "$0"]
  },
  "fut-temporary-directory": {
    "prefix": "fut-temporary-directory",
    "body": ["from utilities.tempfile import TemporaryDirectory", "$0"]
  },

  // third party: (dycw-)utilities.text
  "fut-ensure-str": {
    "prefix": "fut-ensure-str",
    "body": ["from utilities.text import ensure_str", "$0"]
  },
  "fut-ensure-str-error": {
    "prefix": "fut-ensure-str-error",
    "body": ["from utilities.text import EnsureStrError", "$0"]
  },
  "fut-strip-and-dedent": {
    "prefix": "fut-strip-and-dedent",
    "body": ["from utilities.text import strip_and_dedent", "$0"]
  },

  // third party: (dycw-)utilities.timer
  "fut-timer": {
    "prefix": "fut-timer",
    "body": ["from utilities.timer import Timer", "$0"]
  },

  // third party: (dycw-)utilities.types
  "fut-duration": {
    "prefix": "fut-duration",
    "body": ["from utilities.types import Duration", "$0"]
  },
  "fut-ensure-class": {
    "prefix": "fut-ensure-class",
    "body": ["from utilities.types import ensure_class", "$0"]
  },
  "fut-ensure-class-error": {
    "prefix": "fut-ensure-class-error",
    "body": ["from utilities.types import EnsureClassError", "$0"]
  },
  "fut-ensure-hashable": {
    "prefix": "fut-ensure-hashable",
    "body": ["from utilities.types import ensure_hashable", "$0"]
  },
  "fut-ensure-hashable-error": {
    "prefix": "fut-ensure-hashable-error",
    "body": ["from utilities.types import EnsureHashableError", "$0"]
  },
  "fut-get-class": {
    "prefix": "fut-get-class",
    "body": ["from utilities.types import get_class", "$0"]
  },
  "fut-get-class-name": {
    "prefix": "fut-get-class-name",
    "body": ["from utilities.types import get_class_name", "$0"]
  },
  "fut-is-hashable": {
    "prefix": "fut-is-hashable",
    "body": ["from utilities.types import is_hashable", "$0"]
  },
  "fut-is-sized-not-str": {
    "prefix": "fut-is-sized-not-str",
    "body": ["from utilities.types import is_sized_not_str", "$0"]
  },
  "fut-issubclass-except-bool-int": {
    "prefix": "fut-issubclass-except-bool-int",
    "body": ["from utilities.types import issubclass_except_bool_int", "$0"]
  },
  "fut-iterable-strs": {
    "prefix": "fut-iterable-strs",
    "body": ["from utilities.types import IterableStrs", "$0"]
  },
  "fut-number": {
    "prefix": "fut-number",
    "body": ["from utilities.types import Number", "$0"]
  },
  "fut-path-like": {
    "prefix": "fut-path-like",
    "body": ["from utilities.types import PathLike", "$0"]
  },
  "fut-sequence-strs": {
    "prefix": "fut-sequence-strs",
    "body": ["from utilities.types import SequenceStrs", "$0"]
  },

  // third party: (dycw-)utilities.typed_settings
  "fut-app-name-contains-underscore-error": {
    "prefix": "fut-app-name-contains-underscore-error",
    "body": [
      "from utilities.typed_settings import AppNameContainsUnderscoreError",
      "$0"
    ]
  },
  "fut-click-field": {
    "prefix": "fut-click-field",
    "body": ["from utilities.typed_settings import click_field", "$0"]
  },
  "fut-click-options": {
    "prefix": "fut-click-options",
    "body": ["from utilities.typed_settings import click_options", "$0"]
  },
  "fut-get-repo-root-config": {
    "prefix": "fut-get-repo-root-config",
    "body": ["from utilities.typed_settings import get_repo_root_config", "$0"]
  },
  "fut-load-settings": {
    "prefix": "fut-load-settings",
    "body": ["from utilities.typed_settings import load_settings", "$0"]
  },

  // third party: (dycw-)utilities.zoneinfo
  "fut-hong-kong": {
    "prefix": "fut-hong-kong",
    "body": ["from utilities.zoneinfo import HONG_KONG", "$0"]
  },
  "fut-tokyo": {
    "prefix": "fut-tokyo",
    "body": ["from utilities.zoneinfo import TOKYO", "$0"]
  },

  // third party: xarray
  "fxa-data-array": {
    "prefix": "fxa-data-array",
    "body": ["from xarray import DataArray", "$0"]
  },
  "fxa-dataset": {
    "prefix": "fxa-dataset",
    "body": ["from xarray import Dataset", "$0"]
  }
}
